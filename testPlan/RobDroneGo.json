{
	"info": {
		"_postman_id": "dde6224b-16e8-4ae9-a2b0-2454841831d4",
		"name": "RobDroneGo Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30224397"
	},
	"item": [
		{
			"name": "Building",
			"item": [
				{
					"name": "Create Building",
					"item": [
						{
							"name": "Success",
							"item": [
								{
									"name": "BuildingForPut",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"testeid\",\r\n    \"buildingName\": \"For Put Purposes\",\r\n    \"buildingDimensions\": {\r\n        \"width\": 50,\r\n        \"length\": 30\r\n    },\r\n    \"buildingDescription\": \"For put Purposes desc\",\r\n    \"buildingCode\": \"PP\"\r\n}"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"f6e5c1f54e454e4f9b4cf90489cc062c\",\r\n    \"buildingName\": \"Edifício B\",\r\n    \"buildingDimensions\": {\r\n        \"width\": 50,\r\n        \"length\": 30\r\n    },\r\n    \"buildingDescription\": \"DEI Departamento de Engenharia Informática\",\r\n    \"buildingCode\": \"B\"\r\n}"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings"
											]
										}
									},
									"response": []
								},
								{
									"name": "No Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"noNameId\",\r\n    \"buildingDimensions\": {\r\n        \"width\": 50,\r\n        \"length\": 30\r\n    },\r\n    \"buildingDescription\": \"No name\",\r\n    \"buildingCode\": \"NN\"\r\n}"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings"
											]
										}
									},
									"response": []
								},
								{
									"name": "No Description",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"noDescId\",\r\n    \"buildingName\": \"No Description\",\r\n    \"buildingDimensions\": {\r\n        \"width\": 50,\r\n        \"length\": 30\r\n    },\r\n    \"buildingCode\": \"ND\"\r\n}"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invalid Code",
							"item": [
								{
									"name": "SpecialChars",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"buildingName\": \"Special\",\r\n  \"buildingDimensions\": {\r\n    \"width\": 50,\r\n    \"length\": 30\r\n  },\r\n  \"buildingDescription\": \"Special\",\r\n  \"buildingCode\": \"A@\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings"
											]
										}
									},
									"response": []
								},
								{
									"name": "MaxLength",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"buildingName\": \"MaxLenCode\",\r\n  \"buildingDimensions\": {\r\n    \"width\": 50,\r\n    \"length\": 30\r\n  },\r\n  \"buildingDescription\": \"Max len code\",\r\n  \"buildingCode\": \"555555\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings"
											]
										}
									},
									"response": []
								},
								{
									"name": "NoCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"buildingName\": \"No Code\",\r\n  \"buildingDimensions\": {\r\n    \"width\": 50,\r\n    \"length\": 30\r\n  },\r\n  \"buildingDescription\": \"no code\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"buildingName\": \"Empty\",\r\n  \"buildingDimensions\": {\r\n    \"width\": 50,\r\n    \"length\": 30\r\n  },\r\n  \"buildingDescription\": \"Empty\",\r\n  \"buildingCode\": \"  \"\r\n}\r\n"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings"
											]
										}
									},
									"response": []
								},
								{
									"name": "DuplicatedCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(409);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"buildingName\": \"Special\",\r\n  \"buildingDimensions\": {\r\n    \"width\": 50,\r\n    \"length\": 30\r\n  },\r\n  \"buildingDescription\": \"Special\",\r\n  \"buildingCode\": \"B\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invalid Name",
							"item": [
								{
									"name": "SpecialChars",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"buildingName\": \"Special@\",\r\n  \"buildingDimensions\": {\r\n    \"width\": 10,\r\n    \"length\": 10\r\n  },\r\n  \"buildingDescription\": \"Special Chars\",\r\n  \"buildingCode\": \"SP\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings"
											]
										}
									},
									"response": []
								},
								{
									"name": "MaxLength",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"buildingName\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\",\r\n  \"buildingDimensions\": {\r\n    \"width\": 100,\r\n    \"length\": 100\r\n  },\r\n  \"buildingDescription\": \"Invalid range\",\r\n  \"buildingCode\": \"MAX\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"buildingName\": \"    \",\r\n  \"buildingDimensions\": {\r\n    \"width\": 50,\r\n    \"length\": 30\r\n  },\r\n  \"buildingDescription\": \"Empty\",\r\n  \"buildingCode\": \"EM\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invalid Description",
							"item": [
								{
									"name": "SpecialChars",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"buildingName\": \"Special\",\r\n  \"buildingDimensions\": {\r\n    \"width\": 50,\r\n    \"length\": 30\r\n  },\r\n  \"buildingDescription\": \"S!p_c%\",\r\n  \"buildingCode\": \"SP\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings"
											]
										}
									},
									"response": []
								},
								{
									"name": "MaxLength",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"buildingName\": \"MAX\",\r\n  \"buildingDimensions\": {\r\n    \"width\": 50,\r\n    \"length\": 30\r\n  },\r\n  \"buildingDescription\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\",\r\n  \"buildingCode\": \"MAX\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Empty Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"buildingName\": \"Empty\",\r\n  \"buildingDimensions\": {\r\n    \"width\": 50,\r\n    \"length\": 30\r\n  },\r\n  \"buildingDescription\": \"         \",\r\n  \"buildingCode\": \"EM\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invalid Dimensions",
							"item": [
								{
									"name": "NotNumberWidth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"buildingName\": \"NotNumber\",\r\n  \"buildingDimensions\": {\r\n    \"width\": \"a\",\r\n    \"length\": 30\r\n  },\r\n  \"buildingDescription\": \"Not a number\",\r\n  \"buildingCode\": \"NN\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings"
											]
										}
									},
									"response": []
								},
								{
									"name": "NotNumberLength",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"buildingName\": \"NotNumber\",\r\n  \"buildingDimensions\": {\r\n    \"width\": 10,\r\n    \"length\": \"a\"\r\n  },\r\n  \"buildingDescription\": \"Not a number\",\r\n  \"buildingCode\": \"NN\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings"
											]
										}
									},
									"response": []
								},
								{
									"name": "InvalidRangeWidth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"buildingName\": \"InvalidRange\",\r\n  \"buildingDimensions\": {\r\n    \"width\": 0,\r\n    \"length\": 30\r\n  },\r\n  \"buildingDescription\": \"Invalid Range\",\r\n  \"buildingCode\": \"IR\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings"
											]
										}
									},
									"response": []
								},
								{
									"name": "InvalidRangeLength",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"buildingName\": \"InvalidRange\",\r\n  \"buildingDimensions\": {\r\n    \"width\": 10,\r\n    \"length\": 0\r\n  },\r\n  \"buildingDescription\": \"Invalid Range\",\r\n  \"buildingCode\": \"IR\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"buildingName\": \"InvalidRange\",\r\n  \"buildingDescription\": \"Invalid Range\",\r\n  \"buildingCode\": \"IR\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Edit Building",
					"item": [
						{
							"name": "Success",
							"item": [
								{
									"name": "Edit Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"buildingName\": \"Building Changed Success\"\r\n}"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings/{{buildingEditId}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings",
												"{{buildingEditId}}"
											],
											"query": [
												{
													"key": "id",
													"value": "ass",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Edit Name & Desc",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"buildingName\": \"Combined name change\",\r\n    \"buildingDescription\": \"Combined desc change\"\r\n}"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings/{{buildingEditId}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings",
												"{{buildingEditId}}"
											],
											"query": [
												{
													"key": "id",
													"value": "ass",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Edit Dimensions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"buildingDimensions\": {\r\n        \"width\": 50,\r\n        \"length\": 50\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings/{{buildingEditId}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings",
												"{{buildingEditId}}"
											],
											"query": [
												{
													"key": "id",
													"value": "ass",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Edit Width",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"buildingDimensions\": {\r\n        \"width\": 99\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings/{{buildingEditId}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings",
												"{{buildingEditId}}"
											],
											"query": [
												{
													"key": "id",
													"value": "ass",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Edit Width & Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"buildingName\": \"Yeah we combo\",\r\n    \"buildingDimensions\": {\r\n        \"width\": 88\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings/{{buildingEditId}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings",
												"{{buildingEditId}}"
											],
											"query": [
												{
													"key": "id",
													"value": "ass",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Edit Length",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"buildingDimensions\": {\r\n        \"length\": 99\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings/{{buildingEditId}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings",
												"{{buildingEditId}}"
											],
											"query": [
												{
													"key": "id",
													"value": "ass",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Edit Description",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"buildingDescription\": \"Edificio Changed Success\"\r\n}"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings/{{buildingEditId}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings",
												"{{buildingEditId}}"
											],
											"query": [
												{
													"key": "id",
													"value": "ass",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Edit All",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"buildingName\": \"Edifício Put\",\r\n    \"buildingDimensions\": {\r\n        \"width\": 50,\r\n        \"length\": 30\r\n    },\r\n    \"buildingDescription\": \"For put tests\"\r\n}"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings/{{buildingEditId}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings",
												"{{buildingEditId}}"
											],
											"query": [
												{
													"key": "id",
													"value": "ass",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invalid Code",
							"item": [
								{
									"name": "UpdateCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"buildingCode\": \"CNG\"\r\n}\r\n// It is not possible to update the code"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings/{{buildingEditId}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings",
												"{{buildingEditId}}"
											],
											"query": [
												{
													"key": "id",
													"value": "ass",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invalid Name",
							"item": [
								{
									"name": "SpecialChars",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"buildingName\": \"Special@\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings/{{buildingEditId}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings",
												"{{buildingEditId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "MaxLength",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"buildingName\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings/{{buildingEditId}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings",
												"{{buildingEditId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"buildingName\": \"      \"\r\n}"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings/{{buildingEditId}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings",
												"{{buildingEditId}}"
											],
											"query": [
												{
													"key": "id",
													"value": "ass",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invalid Description",
							"item": [
								{
									"name": "SpecialChars",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"buildingDescription\": \"S!p_c%\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings/{{buildingEditId}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings",
												"{{buildingEditId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "MaxLength",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"buildingDescription\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings/{{buildingEditId}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings",
												"{{buildingEditId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"buildingDescription\": \"    \"\r\n}"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings/{{buildingEditId}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings",
												"{{buildingEditId}}"
											],
											"query": [
												{
													"key": "id",
													"value": "ass",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invalid Dimensions Copy",
							"item": [
								{
									"name": "NotNumberWidth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"buildingDimensions\": {\r\n    \"width\": \"a\",\r\n    \"length\": 30\r\n  }\r\n}\r\n"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings/{{buildingEditId}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings",
												"{{buildingEditId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "NotNumberLength",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"buildingDimensions\": {\r\n    \"width\": 10,\r\n    \"length\": \"a\"\r\n  }\r\n}\r\n"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings/{{buildingEditId}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings",
												"{{buildingEditId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "InvalidRangeWidth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"buildingDimensions\": {\r\n    \"width\": -1,\r\n    \"length\": 30\r\n  }\r\n}\r\n"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings/{{buildingEditId}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings",
												"{{buildingEditId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "InvalidRangeLength",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"buildingDimensions\": {\r\n    \"width\": 10,\r\n    \"length\": -1\r\n  }\r\n}\r\n"
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings/{{buildingEditId}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings",
												"{{buildingEditId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "List Buildings",
					"item": [
						{
							"name": "Data Setup",
							"item": [
								{
									"name": "Building One",
									"item": [
										{
											"name": "Create B1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 201\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(201);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"domainId\": \"ed1\",\r\n    \"buildingName\": \"Edifício 1\",\r\n    \"buildingDimensions\": {\r\n        \"width\": 35,\r\n        \"length\": 20\r\n    },\r\n    \"buildingDescription\": \"First\",\r\n    \"buildingCode\": \"1\"\r\n}"
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"buildings"
													]
												}
											},
											"response": []
										},
										{
											"name": "Floor1B1",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"buildingId\" : \"ed1\",\r\n    \"floorDescription\" : \"floor1\",\r\n    \"floorNumber\" : 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"floors"
													]
												}
											},
											"response": []
										},
										{
											"name": "Floor2B1",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"buildingId\" : \"ed1\",\r\n    \"floorDescription\" : \"floor2\",\r\n    \"floorNumber\" : 2\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"floors"
													]
												}
											},
											"response": []
										},
										{
											"name": "Floor3B1",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"buildingId\" : \"ed1\",\r\n    \"floorDescription\" : \"floor3\",\r\n    \"floorNumber\" : 3\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"floors"
													]
												}
											},
											"response": []
										},
										{
											"name": "Floor4B1",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"buildingId\" : \"ed1\",\r\n    \"floorDescription\" : \"floor4\",\r\n    \"floorNumber\" : 4\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"floors"
													]
												}
											},
											"response": []
										},
										{
											"name": "Floor5B1",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"buildingId\" : \"ed1\",\r\n    \"floorDescription\" : \"floor5\",\r\n    \"floorNumber\" : 5\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"floors"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Building Two",
									"item": [
										{
											"name": "Create B2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 201\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(201);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"domainId\": \"ed2\",\r\n    \"buildingName\": \"Edifício 2\",\r\n    \"buildingDimensions\": {\r\n        \"width\": 22,\r\n        \"length\": 32\r\n    },\r\n    \"buildingDescription\": \"Second\",\r\n    \"buildingCode\": \"2\"\r\n}"
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"buildings"
													]
												}
											},
											"response": []
										},
										{
											"name": "Floor1B2",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"buildingId\" : \"ed2\",\r\n    \"floorDescription\" : \"floor1\",\r\n    \"floorNumber\" : 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"floors"
													]
												}
											},
											"response": []
										},
										{
											"name": "Floor2B2",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"buildingId\" : \"ed2\",\r\n    \"floorDescription\" : \"floor2\",\r\n    \"floorNumber\" : 2\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"floors"
													]
												}
											},
											"response": []
										},
										{
											"name": "Floor3B2",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"buildingId\" : \"ed2\",\r\n    \"floorDescription\" : \"floor3\",\r\n    \"floorNumber\" : 3\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"floors"
													]
												}
											},
											"response": []
										},
										{
											"name": "Floor4B2",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"buildingId\" : \"ed2\",\r\n    \"floorDescription\" : \"floor4\",\r\n    \"floorNumber\" : 4\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"floors"
													]
												}
											},
											"response": []
										},
										{
											"name": "Floor5B2",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"buildingId\" : \"ed2\",\r\n    \"floorDescription\" : \"floor5\",\r\n    \"floorNumber\" : 5\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"floors"
													]
												}
											},
											"response": []
										},
										{
											"name": "Floor6B2",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"buildingId\" : \"ed2\",\r\n    \"floorDescription\" : \"floor6\",\r\n    \"floorNumber\" : 6\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"floors"
													]
												}
											},
											"response": []
										},
										{
											"name": "Floor7B2",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"buildingId\" : \"ed2\",\r\n    \"floorDescription\" : \"floor7\",\r\n    \"floorNumber\" : 7\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"floors"
													]
												}
											},
											"response": []
										},
										{
											"name": "Floor8B2",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"buildingId\" : \"ed2\",\r\n    \"floorDescription\" : \"floor8\",\r\n    \"floorNumber\" : 8\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"floors"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Building Three",
									"item": [
										{
											"name": "Create B3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 201\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(201);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"domainId\": \"ed3\",\r\n    \"buildingName\": \"Edifício 3\",\r\n    \"buildingDimensions\": {\r\n        \"width\": 33,\r\n        \"length\": 33\r\n    },\r\n    \"buildingDescription\": \"Third\",\r\n    \"buildingCode\": \"3\"\r\n}"
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"buildings"
													]
												}
											},
											"response": []
										},
										{
											"name": "Floor1B3",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"buildingId\" : \"ed3\",\r\n    \"floorDescription\" : \"floor1\",\r\n    \"floorNumber\" : 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"floors"
													]
												}
											},
											"response": []
										},
										{
											"name": "Floor2B3",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"buildingId\" : \"ed3\",\r\n    \"floorDescription\" : \"floor2\",\r\n    \"floorNumber\" : 2\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"floors"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Previous",
									"item": [
										{
											"name": "FloorForDefault",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"buildingId\" : \"f6e5c1f54e454e4f9b4cf90489cc062c\",\r\n    \"floorDescription\" : \"floor1\",\r\n    \"floorNumber\" : 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"floors"
													]
												}
											},
											"response": []
										},
										{
											"name": "FloorForDefault2",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"buildingId\" : \"f6e5c1f54e454e4f9b4cf90489cc062c\",\r\n    \"floorDescription\" : \"floor1\",\r\n    \"floorNumber\" : 2\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"floors"
													]
												}
											},
											"response": []
										},
										{
											"name": "FloorForNoName",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"buildingId\" : \"noNameId\",\r\n    \"floorDescription\" : \"floor1\",\r\n    \"floorNumber\" : 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"floors"
													]
												}
											},
											"response": []
										},
										{
											"name": "FloorForNoDesc",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"buildingId\" : \"noDescId\",\r\n    \"floorDescription\" : \"floor1\",\r\n    \"floorNumber\" : 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"floors"
													]
												}
											},
											"response": []
										},
										{
											"name": "FloorForNoDesc Copy",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"buildingId\" : \"noDescId\",\r\n    \"floorDescription\" : \"floor1\",\r\n    \"floorNumber\" : 2\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"floors"
													]
												}
											},
											"response": []
										},
										{
											"name": "FloorForNoName2",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"buildingId\" : \"noNameId\",\r\n    \"floorDescription\" : \"floor1\",\r\n    \"floorNumber\" : 2\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"floors"
													]
												}
											},
											"response": []
										},
										{
											"name": "FloorForBuildingForPut Copy",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"buildingId\" : \"testeid\",\r\n    \"floorDescription\" : \"floor1\",\r\n    \"floorNumber\" : 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"floors"
													]
												}
											},
											"response": []
										},
										{
											"name": "FloorForBuildingForPut2",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"buildingId\" : \"testeid\",\r\n    \"floorDescription\" : \"floor1\",\r\n    \"floorNumber\" : 2\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"floors"
													]
												}
											},
											"response": []
										}
									],
									"description": "Folder with requests just to add at least one floor to the buildings created in previous tests"
								}
							]
						},
						{
							"name": "Min&Max",
							"item": [
								{
									"name": "RangeIncludesAll",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Number of buildings returned should be 7\", function () {\r",
													"    // Parse the response JSON\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    // Check the length of the array in the JSON response\r",
													"    pm.expect(jsonData.length).to.eql(7);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings/filter?minFloors=1&maxFloors=10",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings",
												"filter"
											],
											"query": [
												{
													"key": "minFloors",
													"value": "1"
												},
												{
													"key": "maxFloors",
													"value": "10"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Min5Floors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Number of buildings returned should be 2\", function () {\r",
													"    // Parse the response JSON\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    // Check the length of the array in the JSON response\r",
													"    pm.expect(jsonData.length).to.eql(2);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings/filter?minFloors=5&maxFloors=50",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings",
												"filter"
											],
											"query": [
												{
													"key": "minFloors",
													"value": "5"
												},
												{
													"key": "maxFloors",
													"value": "50"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Min7Floors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Number of buildings returned should be 1\", function () {\r",
													"    // Parse the response JSON\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    // Check the length of the array in the JSON response\r",
													"    pm.expect(jsonData.length).to.eql(1);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings/filter?minFloors=7&maxFloors=50",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings",
												"filter"
											],
											"query": [
												{
													"key": "minFloors",
													"value": "7"
												},
												{
													"key": "maxFloors",
													"value": "50"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Max1Floor",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code should be 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Validate that the response is an empty array\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('array');\r",
													"\r",
													"    // Check if the array is empty\r",
													"    pm.expect(responseData).to.be.empty;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings/filter?minFloors=0&maxFloors=1",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings",
												"filter"
											],
											"query": [
												{
													"key": "minFloors",
													"value": "0"
												},
												{
													"key": "maxFloors",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Min10Floors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code should be 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Validate that the response is an empty array\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('array');\r",
													"\r",
													"    // Check if the array is empty\r",
													"    pm.expect(responseData).to.be.empty;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings/filter?minFloors=10&maxFloors=50",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings",
												"filter"
											],
											"query": [
												{
													"key": "minFloors",
													"value": "10"
												},
												{
													"key": "maxFloors",
													"value": "50"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Default",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate that the response is an array\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"});",
											"",
											"",
											"pm.test(\"Verify that the 'domainId' field is not empty for each building\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
											"    ",
											"    responseData.forEach(function(building) {",
											"        pm.expect(building.domainId).to.exist.and.to.not.be.empty;",
											"    });",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"{{PREFIX}}",
										"{{CAMPUS_API}}",
										"buildings"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Floor",
			"item": [
				{
					"name": "bootstrap",
					"item": [
						{
							"name": "list with elevator",
							"item": [
								{
									"name": "bootstrap building 1 for list with elevator",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"buildingToListFloorsWithElevator1\",\r\n    \"buildingName\": \"ListWithElevator\",\r\n    \"buildingDimensions\": {\r\n        \"width\": 50,\r\n        \"length\": 50\r\n    },\r\n    \"buildingDescription\": \"Postman\",\r\n    \"buildingCode\": \"LWE\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings"
											]
										}
									},
									"response": []
								},
								{
									"name": "bootstrap building 2 for list with elevator",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"buildingToListFloorsWithElevator2\",\r\n    \"buildingName\": \"ListWithElevator2\",\r\n    \"buildingDimensions\": {\r\n        \"width\": 50,\r\n        \"length\": 50\r\n    },\r\n    \"buildingDescription\": \"Postman\",\r\n    \"buildingCode\": \"LWE2\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings"
											]
										}
									},
									"response": []
								},
								{
									"name": "bootstrap floor 1 for list with elevator",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\" : \"floorToListWithElevator1\",\r\n    \"buildingId\" : \"buildingToListFloorsWithElevator1\",\r\n    \"floorNumber\" : 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors"
											]
										}
									},
									"response": []
								},
								{
									"name": "bootstrap floor 2 for list with elevator Copy 2",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\" : \"floorToListWithElevator2\",\r\n    \"buildingId\" : \"buildingToListFloorsWithElevator1\",\r\n    \"floorNumber\" : 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors"
											]
										}
									},
									"response": []
								},
								{
									"name": "bootstrap elevator 1",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"elevatorForList1\",\r\n    \"brand\": \"floorbrand\",\r\n    \"model\": \"floormodel\",\r\n    \"serialNumber\": \"9156\",\r\n    \"description\": \"floor elevator 1\",\r\n    \"elevatorPosition\": {\r\n        \"xposition\": 10,\r\n        \"yposition\": 10\r\n    },\r\n    \"orientation\": \"NORTH\",\r\n    \"floors\": [\"floorToListWithElevator1\"],\r\n    \"building\" : \"buildingToListFloorsWithElevator1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/elevators",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"elevators"
											]
										}
									},
									"response": []
								},
								{
									"name": "bootstrap elevator 2",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"elevatorForList2\",\r\n    \"brand\": \"floorbrand2\",\r\n    \"model\": \"floormodel2\",\r\n    \"serialNumber\": \"1286\",\r\n    \"description\": \"floor elevator 2\",\r\n    \"elevatorPosition\": {\r\n        \"xposition\": 10,\r\n        \"yposition\": 12\r\n    },\r\n    \"orientation\": \"NORTH\",\r\n    \"floors\": [\"floorToListWithElevator1\",\"floorToListWithElevator2\"],\r\n    \"building\" : \"buildingToListFloorsWithElevator1\"\r\n\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/elevators",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"elevators"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "list with passage",
							"item": [
								{
									"name": "bootstrap building 1 for list with passage",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"buildingToListFloorsWithPassage1\",\r\n    \"buildingName\": \"BuildingPassageList\",\r\n    \"buildingDimensions\": {\r\n        \"width\": 50,\r\n        \"length\": 50\r\n    },\r\n    \"buildingDescription\": \"Postman\",\r\n    \"buildingCode\": \"LWP\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings"
											]
										}
									},
									"response": []
								},
								{
									"name": "bootstrap building 2 for list with passage",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"buildingToListFloorsWithPassage2\",\r\n    \"buildingName\": \"BuildingPassageList2\",\r\n    \"buildingDimensions\": {\r\n        \"width\": 50,\r\n        \"length\": 50\r\n    },\r\n    \"buildingDescription\": \"Postman\",\r\n    \"buildingCode\": \"LWP2\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings"
											]
										}
									},
									"response": []
								},
								{
									"name": "bootstrap building 3 for list with passage",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"buildingToListFloorsWithPassage3\",\r\n    \"buildingName\": \"BuildingPassageList3\",\r\n    \"buildingDimensions\": {\r\n        \"width\": 50,\r\n        \"length\": 50\r\n    },\r\n    \"buildingDescription\": \"Postman\",\r\n    \"buildingCode\": \"LWP3\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings"
											]
										}
									},
									"response": []
								},
								{
									"name": "bootstrap floor 1 for list with passage",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"passagelistfloor1\",\r\n    \"buildingId\" : \"buildingToListFloorsWithPassage1\",\r\n    \"floorNumber\" : 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors"
											]
										}
									},
									"response": []
								},
								{
									"name": "bootstrap floor 2 for list with passage",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"passagelistfloor2\",\r\n    \"buildingId\" : \"buildingToListFloorsWithPassage1\",\r\n    \"floorNumber\" : 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors"
											]
										}
									},
									"response": []
								},
								{
									"name": "bootstrap floor 3 for list with passage",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"passagelistfloor3\",\r\n    \"buildingId\" : \"buildingToListFloorsWithPassage2\",\r\n    \"floorNumber\" : 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors"
											]
										}
									},
									"response": []
								},
								{
									"name": "bootstrap floor 4 for list with passage",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"passagelistfloor4\",\r\n    \"buildingId\" : \"buildingToListFloorsWithPassage2\",\r\n    \"floorNumber\" : 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors"
											]
										}
									},
									"response": []
								},
								{
									"name": "bootstrap passage 1",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"listwithpassage1\",\r\n    \"passageStartPoint\": {\r\n        \"floorId\": \"passagelistfloor1\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 0\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 1\r\n            }\r\n    },\r\n    \"passageEndPoint\": {\r\n        \"floorId\": \"passagelistfloor4\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 0\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 1\r\n            }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/passages",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"passages"
											]
										}
									},
									"response": []
								},
								{
									"name": "bootstrap passage 2",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"listwithpassage2\",\r\n    \"passageStartPoint\": {\r\n        \"floorId\": \"passagelistfloor3\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 0\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 1\r\n            }\r\n    },\r\n    \"passageEndPoint\": {\r\n        \"floorId\": \"passagelistfloor2\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 0\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 1\r\n            }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/passages",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"passages"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "bootstrap building 1",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"domainId\": \"buildingFloorPostman1\",\r\n    \"buildingName\": \"FloorPostman1\",\r\n    \"buildingDimensions\": {\r\n        \"width\": 3,\r\n        \"length\": 3\r\n    },\r\n    \"buildingDescription\": \"Postman Tests\",\r\n    \"buildingCode\": \"GBS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"{{PREFIX}}",
										"{{CAMPUS_API}}",
										"buildings"
									]
								}
							},
							"response": []
						},
						{
							"name": "bootstrap building 2",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"domainId\": \"buildingFloorPostman2\",\r\n    \"buildingName\": \"FloorPostman2\",\r\n    \"buildingDimensions\": {\r\n        \"width\": 3,\r\n        \"length\": 3\r\n    },\r\n    \"buildingDescription\": \"Postman Tests\",\r\n    \"buildingCode\": \"SBG\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"{{PREFIX}}",
										"{{CAMPUS_API}}",
										"buildings"
									]
								}
							},
							"response": []
						},
						{
							"name": "bootstrap floor 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"domainId\": \"editfloor\",\r\n    \"buildingId\" : \"buildingFloorPostman1\",\r\n    \"floorDescription\" : \"FloorValidAll\",\r\n    \"floorNumber\" : 10\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"{{PREFIX}}",
										"{{CAMPUS_API}}",
										"floors"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "create",
					"item": [
						{
							"name": "valid",
							"item": [
								{
									"name": "valid - all fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"buildingId\" : \"buildingFloorPostman1\",\r\n    \"floorDescription\" : \"FloorValidAll\",\r\n    \"floorNumber\" : 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors"
											]
										}
									},
									"response": []
								},
								{
									"name": "valid - no description",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"buildingId\" : \"buildingFloorPostman1\",\r\n    \"floorNumber\" : 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors"
											]
										}
									},
									"response": []
								},
								{
									"name": "valid - negative floor number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"buildingId\" : \"buildingFloorPostman1\",\r\n    \"floorDescription\" : \"FloorValidNegativeFloorNumber\",\r\n    \"floorNumber\" : -1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "invalid description",
							"item": [
								{
									"name": "invalid - numerical description",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"buildingId\" : \"BuildingFloorPostman1\",\r\n    \"floorDescription\" : 12345,\r\n    \"floorNumber\" : 100\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid - description too long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"buildingId\" : \"BuildingFloorPostman1\",\r\n    \"floorDescription\" : \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\r\n    \"floorNumber\" : 100\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid - empty description",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"buildingId\" : \"BuildingFloorPostman1\",\r\n    \"floorDescription\" : \"\",\r\n    \"floorNumber\" : 100\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid - only whitespaces description",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"buildingId\" : \"buildingFloorPostman1\",\r\n    \"floorDescription\" : \"      \",\r\n    \"floorNumber\" : 100\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "invalid number",
							"item": [
								{
									"name": "invalid - number is a string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"buildingId\" : \"BuildingFloorPostman1\",\r\n    \"floorDescription\" : \"InvalidFloorNumber\",\r\n    \"floorNumber\" : \"stringisnotvalid\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid - number is decimal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"buildingId\" : \"buildingFloorPostman1\",\r\n    \"floorDescription\" : \"Invalid Floor Number\",\r\n    \"floorNumber\" : 1.1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid - number is null or undefined",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"buildingId\" : \"BuildingFloorPostman1\",\r\n    \"floorDescription\" : \"Invalid Floor Number\",\r\n    \"floorNumber\" : null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "invalid building",
							"item": [
								{
									"name": "invalid - building not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"buildingId\" : \"not valid Id\",\r\n    \"floorDescription\" : \"Invalid Building\",\r\n    \"floorNumber\" : 100\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "invalid floor",
							"item": [
								{
									"name": "invalid - floor already exists with number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 409\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"buildingId\" : \"buildingFloorPostman1\",\r\n    \"floorDescription\" : \"FloorValidAll\",\r\n    \"floorNumber\" : 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "edit and load plan",
					"item": [
						{
							"name": "valid",
							"item": [
								{
									"name": "valid - update number and description",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"floorDescription\": \"edit description\",\r\n    \"floorNumber\": -100\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors/{{edit}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors",
												"{{edit}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "valid - update number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"floorNumber\": 20\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors/{{edit}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors",
												"{{edit}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "valid - update description",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"floorDescription\": \"edited without changing the number\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors/{{edit}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors",
												"{{edit}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "valid - number and description both null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"floorDescription\": null,\r\n    \"floorNumber\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors/{{edit}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors",
												"{{edit}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "valid - load plan and update description",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"floorDescription\": \"update + load plan\",\r\n    \"floorPlan\": {\r\n        \"planFloorNumber\": 20,\r\n        \"planFloorSize\": {\r\n            \"width\": 4,\r\n            \"height\": 4\r\n        },\r\n        \"floorPlanGrid\": [\r\n            [\r\n                3,\r\n                0,\r\n                1,\r\n                2\r\n            ],\r\n            [\r\n                2,\r\n                0,\r\n                0,\r\n                2\r\n            ],\r\n            [\r\n                2,\r\n                0,\r\n                0,\r\n                2\r\n            ],\r\n            [\r\n                2,\r\n                1,\r\n                1,\r\n                0\r\n            ]\r\n        ],\r\n        \"floorPlanRooms\": [\r\n            {\r\n                \"roomName\": \"Room1\",\r\n                \"roomCoordinates\": [\r\n                    {\r\n                        \"x\": 10,\r\n                        \"y\": 20\r\n                    },\r\n                    {\r\n                        \"x\": 15,\r\n                        \"y\": 17\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"roomDoorOrientation\": \"S\",\r\n                \"roomDoorCoordinates\": {\r\n                    \"x\": 30,\r\n                    \"y\": 25\r\n                }\r\n            }\r\n        ],\r\n        \"floorPlanElevator\": [\r\n            {\r\n                \"elevatorNumber\": 1,\r\n                \"elevatorCoordinates\": {\r\n                    \"x\": 50,\r\n                    \"y\": 60\r\n                },\r\n                \"elevatorOrientation\": \"S\"\r\n            }\r\n        ],\r\n        \"floorPlanPassages\": [\r\n            {\r\n                \"toFloor\": \"Floor2\",\r\n                \"passageCoordinates\": {\r\n                    \"x\": 70,\r\n                    \"y\": 90\r\n                }\r\n            }\r\n        ],\r\n        \"floorWallTexture\": \"./textures/wall.jpg\",\r\n        \"floorDoorTexture\": \"./textures/door.jpg\",\r\n        \"floorElevatorTexture\": \"./textures/elevator.png\",\r\n        \"floorGroundTexture\": \"./textures/ground.jpg\",\r\n        \"initialPosition\": {\"x\": \"0\", \"y\": \"0\"},\r\n        \"initialDirection\": 0\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors/{{edit}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors",
												"{{edit}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "valid - load floor plan",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"floorPlan\": {\r\n        \"planFloorNumber\": 20,\r\n        \"planFloorSize\": {\r\n            \"width\": 4,\r\n            \"height\": 4\r\n        },\r\n        \"floorPlanGrid\": [\r\n            [\r\n                3,\r\n                0,\r\n                1,\r\n                2\r\n            ],\r\n            [\r\n                2,\r\n                0,\r\n                0,\r\n                2\r\n            ],\r\n            [\r\n                2,\r\n                0,\r\n                0,\r\n                2\r\n            ],\r\n            [\r\n                2,\r\n                1,\r\n                1,\r\n                0\r\n            ]\r\n        ],\r\n        \"floorPlanRooms\": [\r\n            {\r\n                \"roomName\": \"Room1\",\r\n                \"roomCoordinates\": [\r\n                    {\r\n                        \"x\": 10,\r\n                        \"y\": 20\r\n                    },\r\n                    {\r\n                        \"x\": 15,\r\n                        \"y\": 17\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"roomDoorOrientation\": \"S\",\r\n                \"roomDoorCoordinates\": {\r\n                    \"x\": 30,\r\n                    \"y\": 25\r\n                }\r\n            }\r\n        ],\r\n        \"floorPlanElevator\": [\r\n            {\r\n                \"elevatorNumber\": 1,\r\n                \"elevatorCoordinates\": {\r\n                    \"x\": 50,\r\n                    \"y\": 60\r\n                },\r\n                \"elevatorOrientation\": \"S\"\r\n            }\r\n        ],\r\n        \"floorPlanPassages\": [\r\n            {\r\n                \"toFloor\": \"Floor2\",\r\n                \"passageCoordinates\": {\r\n                    \"x\": 70,\r\n                    \"y\": 90\r\n                }\r\n            }\r\n        ],\r\n        \"floorWallTexture\": \"./textures/wall.jpg\",\r\n        \"floorDoorTexture\": \"./textures/door.jpg\",\r\n        \"floorElevatorTexture\": \"./textures/elevator.png\",\r\n        \"floorGroundTexture\": \"./textures/ground.jpg\",\r\n        \"initialPosition\": {\r\n            \"x\": \"0\",\r\n            \"y\": \"0\"\r\n        },\r\n        \"initialDirection\": 0\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors/{{edit}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors",
												"{{edit}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "valid - update floor number and load floor plan",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"floorNumber\": 21,\r\n    \"floorPlan\": {\r\n        \"planFloorNumber\": 21,\r\n        \"planFloorSize\": {\r\n            \"width\": 4,\r\n            \"height\": 4\r\n        },\r\n        \"floorPlanGrid\": [\r\n            [\r\n                3,\r\n                0,\r\n                1,\r\n                2\r\n            ],\r\n            [\r\n                2,\r\n                0,\r\n                0,\r\n                2\r\n            ],\r\n            [\r\n                2,\r\n                0,\r\n                0,\r\n                2\r\n            ],\r\n            [\r\n                2,\r\n                1,\r\n                1,\r\n                0\r\n            ]\r\n        ],\r\n        \"floorPlanRooms\": [\r\n            {\r\n                \"roomName\": \"Room1\",\r\n                \"roomCoordinates\": [\r\n                    {\r\n                        \"x\": 10,\r\n                        \"y\": 20\r\n                    },\r\n                    {\r\n                        \"x\": 15,\r\n                        \"y\": 17\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"roomDoorOrientation\": \"S\",\r\n                \"roomDoorCoordinates\": {\r\n                    \"x\": 30,\r\n                    \"y\": 25\r\n                }\r\n            }\r\n        ],\r\n        \"floorPlanElevator\": [\r\n            {\r\n                \"elevatorNumber\": 1,\r\n                \"elevatorCoordinates\": {\r\n                    \"x\": 50,\r\n                    \"y\": 60\r\n                },\r\n                \"elevatorOrientation\": \"S\"\r\n            }\r\n        ],\r\n        \"floorPlanPassages\": [\r\n            {\r\n                \"toFloor\": \"Floor2\",\r\n                \"passageCoordinates\": {\r\n                    \"x\": 70,\r\n                    \"y\": 90\r\n                }\r\n            }\r\n        ],\r\n        \"floorWallTexture\": \"./textures/wall.jpg\",\r\n        \"floorDoorTexture\": \"./textures/door.jpg\",\r\n        \"floorElevatorTexture\": \"./textures/elevator.png\",\r\n        \"floorGroundTexture\": \"./textures/ground.jpg\",\r\n        \"initialPosition\": {\"x\": \"0\", \"y\": \"0\"},\r\n        \"initialDirection\": 0\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors/{{edit}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors",
												"{{edit}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "invalid",
							"item": [
								{
									"name": "invalid - decimal floor number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"floorNumber\": 1.2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors/{{edit}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors",
												"{{edit}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid - floor description too long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"floorDescription\": \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors/{{edit}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors",
												"{{edit}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid - floor not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 404\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"floorDescription\": \"never reached\",\r\n    \"floorNumber\": 11\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors/InvalidIdFloorForEdit",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors",
												"InvalidIdFloorForEdit"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid - floor number already exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 409\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(409);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"floorNumber\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors/{{edit}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors",
												"{{edit}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid - floor plan grid size incorrect",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"floorPlan\": {\r\n        \"planFloorNumber\": 21,\r\n        \"planFloorSize\": {\r\n            \"width\": 10,\r\n            \"height\": 10\r\n        },\r\n        \"floorPlanGrid\": [\r\n            [\r\n                3,\r\n                0,\r\n                1,\r\n                2\r\n            ],\r\n            [\r\n                2,\r\n                0,\r\n                0,\r\n                2\r\n            ],\r\n            [\r\n                2,\r\n                0,\r\n                0,\r\n                2\r\n            ],\r\n            [\r\n                2,\r\n                1,\r\n                1,\r\n                0\r\n            ]\r\n        ],\r\n        \"floorPlanRooms\": [\r\n            {\r\n                \"roomName\": \"Room1\",\r\n                \"roomCoordinates\": [\r\n                    {\r\n                        \"x\": 10,\r\n                        \"y\": 20\r\n                    },\r\n                    {\r\n                        \"x\": 15,\r\n                        \"y\": 17\r\n                    }\r\n                ],\r\n                \"roomDoorCoordinates\": {\r\n                    \"x\": 30,\r\n                    \"y\": 25\r\n                }\r\n            }\r\n        ],\r\n        \"floorPlanElevator\": [\r\n            {\r\n                \"elevatorNumber\": 1,\r\n                \"elevatorCoordinates\": {\r\n                    \"x\": 50,\r\n                    \"y\": 60\r\n                }\r\n            }\r\n        ],\r\n        \"floorPlanPassages\": [\r\n            {\r\n                \"toFloor\": \"Floor2\",\r\n                \"passageCoordinates\": {\r\n                    \"x\": 70,\r\n                    \"y\": 90\r\n                }\r\n            }\r\n        ],\r\n        \"floorWallTexture\": \"./textures/wall.jpg\",\r\n        \"floorDoorTexture\": \"./textures/door.jpg\",\r\n        \"floorElevatorTexture\": \"./textures/elevator.png\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors/{{edit}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors",
												"{{edit}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid - floor plan floor number incorrect",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"floorPlan\": {\r\n        \"planFloorNumber\": 12,\r\n        \"planFloorSize\": {\r\n            \"width\": 4,\r\n            \"height\": 4\r\n        },\r\n        \"floorPlanGrid\": [\r\n            [\r\n                3,\r\n                0,\r\n                1,\r\n                2\r\n            ],\r\n            [\r\n                2,\r\n                0,\r\n                0,\r\n                2\r\n            ],\r\n            [\r\n                2,\r\n                0,\r\n                0,\r\n                2\r\n            ],\r\n            [\r\n                2,\r\n                1,\r\n                1,\r\n                0\r\n            ]\r\n        ],\r\n        \"floorPlanRooms\": [\r\n            {\r\n                \"roomName\": \"Room1\",\r\n                \"roomCoordinates\": [\r\n                    {\r\n                        \"x\": 10,\r\n                        \"y\": 20\r\n                    },\r\n                    {\r\n                        \"x\": 15,\r\n                        \"y\": 17\r\n                    }\r\n                ],\r\n                \"roomDoorCoordinates\": {\r\n                    \"x\": 30,\r\n                    \"y\": 25\r\n                }\r\n            }\r\n        ],\r\n        \"floorPlanElevator\": [\r\n            {\r\n                \"elevatorNumber\": 1,\r\n                \"elevatorCoordinates\": {\r\n                    \"x\": 50,\r\n                    \"y\": 60\r\n                }\r\n            }\r\n        ],\r\n        \"floorPlanPassages\": [\r\n            {\r\n                \"toFloor\": \"Floor2\",\r\n                \"passageCoordinates\": {\r\n                    \"x\": 70,\r\n                    \"y\": 90\r\n                }\r\n            }\r\n        ],\r\n        \"floorWallTexture\": \"./textures/wall.jpg\",\r\n        \"floorDoorTexture\": \"./textures/door.jpg\",\r\n        \"floorElevatorTexture\": \"./textures/elevator.png\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors/{{edit}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors",
												"{{edit}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid - floor plan floor number different than floor number to update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"floorNumber\": 25,\r\n    \"floorPlan\": {\r\n        \"planFloorNumber\": 12,\r\n        \"planFloorSize\": {\r\n            \"width\": 4,\r\n            \"height\": 4\r\n        },\r\n        \"floorPlanGrid\": [\r\n            [\r\n                3,\r\n                0,\r\n                1,\r\n                2\r\n            ],\r\n            [\r\n                2,\r\n                0,\r\n                0,\r\n                2\r\n            ],\r\n            [\r\n                2,\r\n                0,\r\n                0,\r\n                2\r\n            ],\r\n            [\r\n                2,\r\n                1,\r\n                1,\r\n                0\r\n            ]\r\n        ],\r\n        \"floorPlanRooms\": [\r\n            {\r\n                \"roomName\": \"Room1\",\r\n                \"roomCoordinates\": [\r\n                    {\r\n                        \"x\": 10,\r\n                        \"y\": 20\r\n                    },\r\n                    {\r\n                        \"x\": 15,\r\n                        \"y\": 17\r\n                    }\r\n                ],\r\n                \"roomDoorCoordinates\": {\r\n                    \"x\": 30,\r\n                    \"y\": 25\r\n                }\r\n            }\r\n        ],\r\n        \"floorPlanElevator\": [\r\n            {\r\n                \"elevatorNumber\": 1,\r\n                \"elevatorCoordinates\": {\r\n                    \"x\": 50,\r\n                    \"y\": 60\r\n                }\r\n            }\r\n        ],\r\n        \"floorPlanPassages\": [\r\n            {\r\n                \"toFloor\": \"Floor2\",\r\n                \"passageCoordinates\": {\r\n                    \"x\": 70,\r\n                    \"y\": 90\r\n                }\r\n            }\r\n        ],\r\n        \"floorWallTexture\": \"./textures/wall.jpg\",\r\n        \"floorDoorTexture\": \"./textures/door.jpg\",\r\n        \"floorElevatorTexture\": \"./textures/elevator.png\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors/{{edit}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors",
												"{{edit}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid - floor plan textures are not valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"floorNumber\": 25,\r\n    \"floorPlan\": {\r\n        \"planFloorNumber\": 12,\r\n        \"planFloorSize\": {\r\n            \"width\": 4,\r\n            \"height\": 4\r\n        },\r\n        \"floorPlanGrid\": [\r\n            [\r\n                3,\r\n                0,\r\n                1,\r\n                2\r\n            ],\r\n            [\r\n                2,\r\n                0,\r\n                0,\r\n                2\r\n            ],\r\n            [\r\n                2,\r\n                0,\r\n                0,\r\n                2\r\n            ],\r\n            [\r\n                2,\r\n                1,\r\n                1,\r\n                0\r\n            ]\r\n        ],\r\n        \"floorPlanRooms\": [\r\n            {\r\n                \"roomName\": \"Room1\",\r\n                \"roomCoordinates\": [\r\n                    {\r\n                        \"x\": 10,\r\n                        \"y\": 20\r\n                    },\r\n                    {\r\n                        \"x\": 15,\r\n                        \"y\": 17\r\n                    }\r\n                ],\r\n                \"roomDoorCoordinates\": {\r\n                    \"x\": 30,\r\n                    \"y\": 25\r\n                }\r\n            }\r\n        ],\r\n        \"floorPlanElevator\": [\r\n            {\r\n                \"elevatorNumber\": 1,\r\n                \"elevatorCoordinates\": {\r\n                    \"x\": 50,\r\n                    \"y\": 60\r\n                }\r\n            }\r\n        ],\r\n        \"floorPlanPassages\": [\r\n            {\r\n                \"toFloor\": \"Floor2\",\r\n                \"passageCoordinates\": {\r\n                    \"x\": 70,\r\n                    \"y\": 90\r\n                }\r\n            }\r\n        ],\r\n        \"floorWallTexture\": \"./textures/wall.valid?\",\r\n        \"floorDoorTexture\": \"./textures/door.notvalid\",\r\n        \"floorElevatorTexture\": \"./textures/elevator.invalid\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors/{{edit}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors",
												"{{edit}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "list",
					"item": [
						{
							"name": "valid",
							"item": [
								{
									"name": "list all",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Validate that the response is an array\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('array');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors/",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors",
												""
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "list by building",
					"item": [
						{
							"name": "invalid",
							"item": [
								{
									"name": "invalid - building not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors/buildingNotFoundForList",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors",
												"buildingNotFoundForList"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "valid",
							"item": [
								{
									"name": "valid - floors list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Validate that the response is an array\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('array');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors/{{list}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors",
												"{{list}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "valid - no floors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Validate that the response is an array\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('array');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors/{{nofloors}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors",
												"{{nofloors}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "list with elevators",
					"item": [
						{
							"name": "invalid",
							"item": [
								{
									"name": "invalid - building not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors/inBuilding/noBuilding/withElevator",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors",
												"inBuilding",
												"noBuilding",
												"withElevator"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "valid",
							"item": [
								{
									"name": "valid - floors with elevator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Validate that the response is an array\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('array');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors/inBuilding/{{listwithelevator}}/withElevator",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors",
												"inBuilding",
												"{{listwithelevator}}",
												"withElevator"
											]
										}
									},
									"response": []
								},
								{
									"name": "valid - no floors with elevator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Validate that the response is an array\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('array');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors/inBuilding/{{listwithelevatornofloors}}/withElevator",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors",
												"inBuilding",
												"{{listwithelevatornofloors}}",
												"withElevator"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "list with passages",
					"item": [
						{
							"name": "invalid",
							"item": [
								{
									"name": "invalid - building not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors/inBuilding/noBuilding/withPassage",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors",
												"inBuilding",
												"noBuilding",
												"withPassage"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "valid",
							"item": [
								{
									"name": "valid - floors with passage",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Validate that the response is an array\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('array');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors/inBuilding/{{listwithpassage}}/withPassage",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors",
												"inBuilding",
												"{{listwithpassage}}",
												"withPassage"
											]
										}
									},
									"response": []
								},
								{
									"name": "valid - no floors with passage",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Validate that the response is an array\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('array');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors/inBuilding/{{listwithpassagenofloors}}/withPassage",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors",
												"inBuilding",
												"{{listwithpassagenofloors}}",
												"withPassage"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Elevator",
			"item": [
				{
					"name": "bootstrap",
					"item": [
						{
							"name": "Buildings",
							"item": [
								{
									"name": "bootstrap building 1 for elevators",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"buildingelevator1\",\r\n    \"buildingName\": \"buildingelevator1\",\r\n    \"buildingDimensions\": {\r\n        \"width\": 50,\r\n        \"length\": 50\r\n    },\r\n    \"buildingDescription\": \"Postman Tests\",\r\n    \"buildingCode\": \"BE1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings"
											]
										}
									},
									"response": []
								},
								{
									"name": "bootstrap building 2 for elevators",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"buildingelevator2\",\r\n    \"buildingName\": \"buildingelevator2\",\r\n    \"buildingDimensions\": {\r\n        \"width\": 50,\r\n        \"length\": 50\r\n    },\r\n    \"buildingDescription\": \"Postman Tests\",\r\n    \"buildingCode\": \"BE2\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings"
											]
										}
									},
									"response": []
								},
								{
									"name": "bootstrap building 3 for elevators",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"buildingelevator3\",\r\n    \"buildingName\": \"buildingelevator3\",\r\n    \"buildingDimensions\": {\r\n        \"width\": 50,\r\n        \"length\": 50\r\n    },\r\n    \"buildingDescription\": \"Postman Tests\",\r\n    \"buildingCode\": \"BE3\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"buildings"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Floors",
							"item": [
								{
									"name": "bootstrap floor 1 for elevators",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\" : \"elevatorfloor1\",\r\n    \"buildingId\" : \"buildingelevator1\",\r\n    \"floorNumber\" : 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors"
											]
										}
									},
									"response": []
								},
								{
									"name": "bootstrap floor 2 for elevators",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\" : \"elevatorfloor2\",\r\n    \"buildingId\" : \"buildingelevator1\",\r\n    \"floorNumber\" : 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors"
											]
										}
									},
									"response": []
								},
								{
									"name": "bootstrap floor 3 for elevators",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\" : \"elevatorfloor3\",\r\n    \"buildingId\" : \"buildingelevator2\",\r\n    \"floorNumber\" : 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors"
											]
										}
									},
									"response": []
								},
								{
									"name": "bootstrap floor 4 for elevators",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\" : \"elevatorfloor4\",\r\n    \"buildingId\" : \"buildingelevator2\",\r\n    \"floorNumber\" : 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors"
											]
										}
									},
									"response": []
								},
								{
									"name": "bootstrap floor 5 for elevators",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\" : \"elevatorfloor5\",\r\n    \"buildingId\" : \"buildingelevator3\",\r\n    \"floorNumber\" : 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"floors"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Elevators",
							"item": [
								{
									"name": "bootstrap elevator full 1",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"elevatormain1\",\r\n    \"brand\": \"marca\",\r\n    \"model\": \"modelo\",\r\n    \"serialNumber\": \"24598\",\r\n    \"description\": \"test description\",\r\n    \"elevatorPosition\": {\r\n        \"xposition\": 10,\r\n        \"yposition\": 10\r\n    },\r\n    \"orientation\": \"NORTH\",\r\n    \"floors\": [\"elevatorfloor1\"],\r\n    \"building\" : \"buildingelevator1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/elevators",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"elevators"
											]
										}
									},
									"response": []
								},
								{
									"name": "bootstrap elevator full 2",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"elevatormain2\",\r\n    \"brand\": \"marca\",\r\n    \"model\": \"modelo\",\r\n    \"serialNumber\": \"23421\",\r\n    \"description\": \"test description\",\r\n    \"elevatorPosition\": {\r\n        \"xposition\": 10,\r\n        \"yposition\": 12\r\n    },\r\n    \"orientation\": \"NORTH\",\r\n    \"floors\": [\"elevatorfloor1\"],\r\n    \"building\" : \"buildingelevator1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/elevators",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"elevators"
											]
										}
									},
									"response": []
								},
								{
									"name": "bootstrap elevator full 3",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"elevatormain3\",\r\n    \"brand\": \"marca\",\r\n    \"model\": \"modelo\",\r\n    \"serialNumber\": \"54361\",\r\n    \"description\": \"test description\",\r\n    \"elevatorPosition\": {\r\n        \"xposition\": 10,\r\n        \"yposition\": 12\r\n    },\r\n    \"orientation\": \"NORTH\",\r\n    \"floors\": [\"elevatorfloor2\"],\r\n    \"building\" : \"buildingelevator1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/elevators",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"elevators"
											]
										}
									},
									"response": []
								},
								{
									"name": "bootstrap elevator full 4",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"elevatormain4\",\r\n    \"brand\": \"marca\",\r\n    \"model\": \"modelo\",\r\n    \"serialNumber\": \"24598\",\r\n    \"description\": \"test description\",\r\n    \"elevatorPosition\": {\r\n        \"xposition\": 10,\r\n        \"yposition\": 10\r\n    },\r\n    \"orientation\": \"NORTH\",\r\n    \"floors\": [\"elevatorfloor3\"],\r\n    \"building\" : \"buildingelevator2\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/elevators",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"elevators"
											]
										}
									},
									"response": []
								},
								{
									"name": "bootstrap elevator no brand and model",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"elevatormain5\",\r\n    \"serialNumber\": \"93743\",\r\n    \"description\": \"test description\",\r\n    \"elevatorPosition\": {\r\n        \"xposition\": 40,\r\n        \"yposition\": 40\r\n    },\r\n    \"orientation\": \"NORTH\",\r\n    \"floors\": [\"elevatorfloor1\"],\r\n    \"building\" : \"buildingelevator1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/elevators",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"elevators"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "create",
					"item": [
						{
							"name": "Valid",
							"item": [
								{
									"name": "valid create elevator - Full",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"elevatormain6\",\r\n    \"brand\": \"marca\",\r\n    \"model\": \"modelo\",\r\n    \"serialNumber\": \"734324\",\r\n    \"description\" : \"teste description\",\r\n    \"elevatorPosition\": {\r\n        \"xposition\": 10,\r\n        \"yposition\": 10\r\n    },\r\n    \"orientation\": \"NORTH\",\r\n    \"floors\": [\"elevatorfloor5\"],\r\n    \"building\" : \"buildingelevator3\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/elevators",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"elevators"
											]
										}
									},
									"response": []
								},
								{
									"name": "valid create elevator - No description",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"elevatormain7\",\r\n    \"brand\": \"marca\",\r\n    \"model\": \"modelo\",\r\n    \"serialNumber\": \"734324\",\r\n    \"elevatorPosition\": {\r\n        \"xposition\": 10,\r\n        \"yposition\": 12\r\n    },\r\n    \"orientation\": \"NORTH\",\r\n    \"floors\": [\"elevatorfloor5\"],\r\n    \"building\" : \"buildingelevator3\"\r\n\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/elevators",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"elevators"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Fails Brand without Model",
							"item": [
								{
									"name": "fail create elevator - brand without model",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"fail-no-model\",\r\n    \"brand\": \"marca\",\r\n    \"serialNumber\": \"734324\",\r\n    \"description\": \"test description\",\r\n    \"elevatorPosition\": {\r\n        \"xposition\": 20,\r\n        \"yposition\": 20\r\n    },\r\n    \"orientation\": \"NORTH\",\r\n    \"floors\": [\"elevatorfloor5\"],\r\n    \"building\" : \"buildingelevator3\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/elevators",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"elevators"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Fails Building does not exist",
							"item": [
								{
									"name": "fail create elevator - building does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"130\",\r\n    \"brand\": \"marca\",\r\n    \"model\": \"modelo\",\r\n    \"serialNumber\": \"734324\",\r\n    \"description\" : \"teste description\",\r\n    \"elevatorPosition\": {\r\n        \"xposition\": 10,\r\n        \"yposition\": 10\r\n    },\r\n    \"orientation\": \"NORTH\",\r\n    \"floors\": [\"1\"],\r\n    \"building\" : \"123-0342\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/elevators",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"elevators"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Fails Floor does not exist in building",
							"item": [
								{
									"name": "fail create elevator - floor does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"fail-floor-does-not-exist\",\r\n    \"brand\": \"marca\",\r\n    \"model\": \"modelo\",\r\n    \"serialNumber\": \"734324\",\r\n    \"description\": \" teste description\",\r\n    \"elevatorPosition\": {\r\n        \"xposition\": 20,\r\n        \"yposition\": 20\r\n    },\r\n    \"orientation\": \"NORTH\",\r\n    \"floors\": [\"does-not-exist\"],\r\n    \"building\" : \"buildingelevator3\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/elevators",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"elevators"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Fails Elevator With Position Occupied",
							"item": [
								{
									"name": "fail create elevator - position occupied",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"fail-occupied-position\",\r\n    \"brand\": \"marca\",\r\n    \"model\": \"modelo\",\r\n    \"serialNumber\": \"734324\",\r\n    \"description\" : \"teste description\",\r\n    \"elevatorPosition\": {\r\n        \"xposition\": 10,\r\n        \"yposition\": 10\r\n    },\r\n    \"orientation\": \"NORTH\",\r\n    \"floors\": [\"elevatorfloor5\"],\r\n    \"building\" : \"buildingelevator3\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/elevators",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"elevators"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Fails Invalid Description",
							"item": [
								{
									"name": "fail create elevator - invalid description",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"fail-no-description\",\r\n    \"brand\": \"marca\",\r\n    \"model\": \"modelo\",\r\n    \"serialNumber\": \"734324\",\r\n    \"description\": \"!\",\r\n    \"elevatorPosition\": {\r\n        \"xposition\": 20,\r\n        \"yposition\": 20\r\n    },\r\n    \"orientation\": \"NORTH\",\r\n    \"floors\": [\"elevatorfloor5\"],\r\n    \"building\" : \"buildingelevator3\"\r\n\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/elevators",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"elevators"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Fails Invalid Brand",
							"item": [
								{
									"name": "fail create elevator - invalid brand",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"fail-no-brand\",\r\n    \"brand\": \"!\",\r\n    \"model\": \"modelo\",\r\n    \"serialNumber\": \"734324\",\r\n    \"description\": \"teste description\",\r\n    \"elevatorPosition\": {\r\n        \"xposition\": 20,\r\n        \"yposition\": 20\r\n    },\r\n    \"orientation\": \"NORTH\",\r\n    \"floors\": [\"elevatorfloor5\"],\r\n    \"building\" : \"buildingelevator3\"\r\n\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/elevators",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"elevators"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Fails Invalid Model",
							"item": [
								{
									"name": "fail create elevator - invalid model",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"fail-no-model\",\r\n    \"brand\": \"marca\",\r\n    \"model\": \"    \",\r\n    \"serialNumber\": \"734324\",\r\n    \"description\": \"teste description\",\r\n    \"elevatorPosition\": {\r\n        \"xposition\": 20,\r\n        \"yposition\": 20\r\n    },\r\n    \"orientation\": \"NORTH\",\r\n    \"floors\": [\"elevatorfloor5\"],\r\n    \"building\" : \"buildingelevator3\"\r\n\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/elevators",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"elevators"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Fails Invalid Serial Number",
							"item": [
								{
									"name": "fail create elevator - invalid serial number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"fail-invalid-serial-number\",\r\n    \"brand\": \"marca\",\r\n    \"model\": \"modelo\",\r\n    \"serialNumber\": \"23!\",\r\n    \"description\" : \"teste description\",\r\n    \"elevatorPosition\": {\r\n        \"xposition\": 20,\r\n        \"yposition\": 20\r\n    },\r\n    \"orientation\": \"NORTH\",\r\n    \"floors\": [\"elevatorfloor5\"],\r\n    \"building\" : \"buildingelevator3\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/elevators",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"elevators"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "edit",
					"item": [
						{
							"name": "fails to occupied position",
							"item": [
								{
									"name": "fail edit elevator - occupied position with just position",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"elevatorPosition\": {\r\n        \"xposition\": 10,\r\n        \"yposition\": 11\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/elevators/elevatormain1",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"elevators",
												"elevatormain1"
											]
										}
									},
									"response": []
								},
								{
									"name": "fail edit elevator - occupied position with just floor",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"floors\": [\"elevatorfloor1\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/elevators/elevatormain3",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"elevators",
												"elevatormain3"
											]
										}
									},
									"response": []
								},
								{
									"name": "fail edit elevator - occupied position with floor and position",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"elevatorPosition\": {\r\n        \"xposition\": 10,\r\n        \"yposition\": 9\r\n    },\r\n    \"floors\": [\"elevatorfloor1\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/elevators/elevatormain3",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"elevators",
												"elevatormain3"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "fails invalid fields",
							"item": [
								{
									"name": "fail edit elevator - invalid serial number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"serialNumber\": \"23 !\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/elevators/elevatormain1",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"elevators",
												"elevatormain1"
											]
										}
									},
									"response": []
								},
								{
									"name": "fail edit elevator - invalid description",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"test description!\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/elevators/elevatormain1",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"elevators",
												"elevatormain1"
											]
										}
									},
									"response": []
								},
								{
									"name": "fail edit elevator - invalid model",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"model\": \"!\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/elevators/elevatormain5",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"elevators",
												"elevatormain5"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "fails brand without model",
							"item": [
								{
									"name": "fail edit elevator - brand without model",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"brand\": \"marca\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/elevators/elevatormain5",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"elevators",
												"elevatormain5"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "fails with floor not from building",
							"item": [
								{
									"name": "fail edit elevator - floor not from building",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"floors\": [\"elevatorfloor5\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/elevators/elevatormain2",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"elevators",
												"elevatormain2"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "success",
							"item": [
								{
									"name": "valid edit elevator - from position 10,12 to 10,11",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"elevatorPosition\": {\r\n        \"xposition\": 10,\r\n        \"yposition\": 15\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/elevators/elevatormain1",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"elevators",
												"elevatormain1"
											]
										}
									},
									"response": []
								},
								{
									"name": "valid edit elevator - full edit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"brand\": \"updated\",\r\n    \"model\": \"updated\",\r\n    \"serialNumber\": \"12345\",\r\n    \"description\": \"updated\",\r\n    \"elevatorPosition\": {\r\n        \"xposition\": 45,\r\n        \"yposition\": 45\r\n    },\r\n    \"orientation\": \"SOUTH\",\r\n    \"floors\": [\"elevatorfloor2\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/elevators/elevatormain5",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"elevators",
												"elevatormain5"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "listElevatorFromBuilding",
					"item": [
						{
							"name": "get elevators 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validate that the response is an array\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/elevators/inBuilding/buildingelevator1",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"{{PREFIX}}",
										"{{CAMPUS_API}}",
										"elevators",
										"inBuilding",
										"buildingelevator1"
									]
								}
							},
							"response": []
						},
						{
							"name": "get elevators 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validate that the response is an array\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/elevators/inBuilding/buildingelevator2",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"{{PREFIX}}",
										"{{CAMPUS_API}}",
										"elevators",
										"inBuilding",
										"buildingelevator2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail Building Does Not Exist Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/elevators/inBuilding/4353",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"{{PREFIX}}",
										"{{CAMPUS_API}}",
										"elevators",
										"inBuilding",
										"4353"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "listAll",
					"item": [
						{
							"name": "get all elevators",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validate that the response is an array\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/elevators",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"{{PREFIX}}",
										"{{CAMPUS_API}}",
										"elevators"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Passage",
			"item": [
				{
					"name": "Create Passage",
					"item": [
						{
							"name": "Bootstrap",
							"item": [
								{
									"name": "Buildings",
									"item": [
										{
											"name": "Building A",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 201\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(201);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"domainId\": \"testeid1\",\r\n    \"buildingName\": \"Edifício A Passagem\",\r\n    \"buildingDimensions\": {\r\n        \"width\": 50,\r\n        \"length\": 30\r\n    },\r\n    \"buildingDescription\": \"DEI Departamento de Engenharia Informática\",\r\n    \"buildingCode\": \"A\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"buildings"
													]
												}
											},
											"response": []
										},
										{
											"name": "Building B",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 201\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(201);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"domainId\": \"testeid2\",\r\n    \"buildingName\": \"Edifício B Passagem\",\r\n    \"buildingDimensions\": {\r\n        \"width\": 50,\r\n        \"length\": 40\r\n    },\r\n    \"buildingDescription\": \"DEI Departamento de Engenharia Informática\",\r\n    \"buildingCode\": \"PASSB\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"buildings"
													]
												}
											},
											"response": []
										},
										{
											"name": "Building C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 201\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(201);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"domainId\": \"testeid3\",\r\n    \"buildingName\": \"Edifício C Passagem\",\r\n    \"buildingDimensions\": {\r\n        \"width\": 50,\r\n        \"length\": 50\r\n    },\r\n    \"buildingDescription\": \"DEI Departamento de Engenharia Informática\",\r\n    \"buildingCode\": \"C\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"buildings"
													]
												}
											},
											"response": []
										},
										{
											"name": "Building D",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 201\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(201);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"domainId\": \"testeid4\",\r\n    \"buildingName\": \"Edifício D Passagem\",\r\n    \"buildingDimensions\": {\r\n        \"width\": 50,\r\n        \"length\": 50\r\n    },\r\n    \"buildingDescription\": \"DEI Departamento de Engenharia Informática\",\r\n    \"buildingCode\": \"PASSD\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"buildings"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Floors",
									"item": [
										{
											"name": "Floor1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 201\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(201);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"domainId\": \"floortesteid1\",\r\n    \"buildingId\" : \"testeid1\",\r\n    \"floorDescription\" : \"Floor 1 teste building A\",\r\n    \"floorNumber\" : 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"floors"
													]
												}
											},
											"response": []
										},
										{
											"name": "Floor2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 201\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(201);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"domainId\": \"floortesteid2\",\r\n    \"buildingId\" : \"testeid1\",\r\n    \"floorDescription\" : \"Floor 2 teste building A\",\r\n    \"floorNumber\" : 2\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"floors"
													]
												}
											},
											"response": []
										},
										{
											"name": "Floor3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 201\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(201);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"domainId\": \"floortesteid3\",\r\n    \"buildingId\" : \"testeid2\",\r\n    \"floorDescription\" : \"Floor 1 teste building B\",\r\n    \"floorNumber\" : 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"floors"
													]
												}
											},
											"response": []
										},
										{
											"name": "Floor4",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 201\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(201);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"domainId\": \"floortesteid4\",\r\n    \"buildingId\" : \"testeid3\",\r\n    \"floorDescription\" : \"Floor 1 teste building C\",\r\n    \"floorNumber\" : 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"floors"
													]
												}
											},
											"response": []
										},
										{
											"name": "Floor5",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 201\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(201);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"domainId\": \"floortesteid5\",\r\n    \"buildingId\" : \"testeid1\",\r\n    \"floorDescription\" : \"Floor 1 teste building A\",\r\n    \"floorNumber\" : 3\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"floors"
													]
												}
											},
											"response": []
										},
										{
											"name": "Floor6",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 201\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(201);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"domainId\": \"floortesteid6\",\r\n    \"buildingId\" : \"testeid2\",\r\n    \"floorDescription\" : \"Floor 1 teste building A\",\r\n    \"floorNumber\" : 2\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"floors"
													]
												}
											},
											"response": []
										},
										{
											"name": "Floor7",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 201\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(201);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"domainId\": \"floortesteid7\",\r\n    \"buildingId\" : \"testeid1\",\r\n    \"floorDescription\" : \"Floor 1 teste building A\",\r\n    \"floorNumber\" : 4\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"floors"
													]
												}
											},
											"response": []
										},
										{
											"name": "Floor 8",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 201\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(201);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"domainId\": \"floortesteid8\",\r\n    \"buildingId\" : \"testeid2\",\r\n    \"floorDescription\" : \"Floor 1 teste building A\",\r\n    \"floorNumber\" : 3\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"floors"
													]
												}
											},
											"response": []
										},
										{
											"name": "Floor 9",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 201\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(201);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"domainId\": \"floortesteid9\",\r\n    \"buildingId\" : \"testeid4\",\r\n    \"floorDescription\" : \"Floor 1 teste building D\",\r\n    \"floorNumber\" : 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"floors"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Elevators",
									"item": [
										{
											"name": "Elevator1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 201\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(201);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"domainId\": \"elevatortesteid1\",\r\n    \"brand\": \"marca\",\r\n    \"model\": \"modelo\",\r\n    \"serialNumber\": \"123456789\",\r\n    \"description\" : \"teste description\",\r\n    \"elevatorPosition\": {\r\n        \"xposition\": 0,\r\n        \"yposition\": 4\r\n    },\r\n    \"orientation\": \"NORTH\",\r\n    \"floors\": [\"floortesteid3\"],\r\n    \"building\" : \"testeid2\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/elevators",
													"host": [
														"{{URL}}"
													],
													"port": "{{PORT}}",
													"path": [
														"{{PREFIX}}",
														"{{CAMPUS_API}}",
														"elevators"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Valid",
							"item": [
								{
									"name": "Create Passage",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"passage1\",\r\n    \"passageStartPoint\": {\r\n        \"floorId\": \"floortesteid1\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 0\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 1\r\n            }\r\n    },\r\n    \"passageEndPoint\": {\r\n        \"floorId\": \"floortesteid3\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 0\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 1\r\n            }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/passages",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"passages"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Passage2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"passagetest2\",\r\n    \"passageStartPoint\": {\r\n        \"floorId\": \"floortesteid1\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 6\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 7\r\n            }\r\n    },\r\n    \"passageEndPoint\": {\r\n        \"floorId\": \"floortesteid9\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 6\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 7\r\n            }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/passages",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"passages"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invalid",
							"item": [
								{
									"name": "Invalid Wall",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"passage2\",\r\n    \"passageStartPoint\": {\r\n        \"floorId\": \"floortesteid1\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 1,\r\n                \"y\": 1\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 1,\r\n                \"y\": 2\r\n            }\r\n    },\r\n    \"passageEndPoint\": {\r\n        \"floorId\": \"floortesteid4\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 1,\r\n                \"y\": 1\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 1,\r\n                \"y\": 2\r\n            }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/passages",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"passages"
											]
										}
									},
									"response": []
								},
								{
									"name": "Off Limits",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"passage3\",\r\n    \"passageStartPoint\": {\r\n        \"floorId\": \"floortesteid1\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 9000\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 9001\r\n            }\r\n    },\r\n    \"passageEndPoint\": {\r\n        \"floorId\": \"floortesteid4\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 0\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 1\r\n            }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/passages",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"passages"
											]
										}
									},
									"response": []
								},
								{
									"name": "Non Consecutive Coordinates",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"passage3\",\r\n    \"passageStartPoint\": {\r\n        \"floorId\": \"floortesteid1\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 2\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 5\r\n            }\r\n    },\r\n    \"passageEndPoint\": {\r\n        \"floorId\": \"floortesteid4\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 2\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 5\r\n            }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/passages",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"passages"
											]
										}
									},
									"response": []
								},
								{
									"name": "Same Passage DomainId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 409\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(409);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"passage1\",\r\n    \"passageStartPoint\": {\r\n        \"floorId\": \"floortesteid1\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 4\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 3\r\n            }\r\n    },\r\n    \"passageEndPoint\": {\r\n        \"floorId\": \"floortesteid4\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 4\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 3\r\n            }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/passages",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"passages"
											]
										}
									},
									"response": []
								},
								{
									"name": "Same Floors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 409\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(409);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"passage2\",\r\n    \"passageStartPoint\": {\r\n        \"floorId\": \"floortesteid1\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 2\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 3\r\n            }\r\n    },\r\n    \"passageEndPoint\": {\r\n        \"floorId\": \"floortesteid3\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 2\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 3\r\n            }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/passages",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"passages"
											]
										}
									},
									"response": []
								},
								{
									"name": "Floor Not Found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 404\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"passage2\",\r\n    \"passageStartPoint\": {\r\n        \"floorId\": \"floor-teste-não-existe\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 2\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 3\r\n            }\r\n    },\r\n    \"passageEndPoint\": {\r\n        \"floorId\": \"floortesteid3\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 2\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 3\r\n            }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/passages",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"passages"
											]
										}
									},
									"response": []
								},
								{
									"name": "Same Building",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"passage2\",\r\n    \"passageStartPoint\": {\r\n        \"floorId\": \"floortesteid1\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 2\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 3\r\n            }\r\n    },\r\n    \"passageEndPoint\": {\r\n        \"floorId\": \"floortesteid2\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 2\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 3\r\n            }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/passages",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"passages"
											]
										}
									},
									"response": []
								},
								{
									"name": "Existing Reversed Floors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 409\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(409);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"passage2\",\r\n    \"passageStartPoint\": {\r\n        \"floorId\": \"floortesteid3\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 2\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 3\r\n            }\r\n    },\r\n    \"passageEndPoint\": {\r\n        \"floorId\": \"floortesteid1\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 2\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 3\r\n            }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/passages",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"passages"
											]
										}
									},
									"response": []
								},
								{
									"name": "Existing Coordinates",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"passage2\",\r\n    \"passageStartPoint\": {\r\n        \"floorId\": \"floortesteid1\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 0\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 1\r\n            }\r\n    },\r\n    \"passageEndPoint\": {\r\n        \"floorId\": \"floortesteid4\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 0\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 1\r\n            }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/passages",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"passages"
											]
										}
									},
									"response": []
								},
								{
									"name": "Null Coordinates",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"passage2\",\r\n    \"passageStartPoint\": {\r\n        \"floorId\": \"floortesteid1\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": null,\r\n                \"y\": 9000\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 9001\r\n            }\r\n    },\r\n    \"passageEndPoint\": {\r\n        \"floorId\": \"floortesteid4\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": null\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 1\r\n            }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/passages",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"passages"
											]
										}
									},
									"response": []
								},
								{
									"name": "Position Occupied",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"passage2\",\r\n    \"passageStartPoint\": {\r\n        \"floorId\": \"floortesteid4\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 5\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 6\r\n            }\r\n    },\r\n    \"passageEndPoint\": {\r\n        \"floorId\": \"floortesteid1\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 2\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 1\r\n            }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/passages",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"passages"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Passage (There is already a passage between the two buildings, for the selected floor)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 409\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(409);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"passage2\",\r\n    \"passageStartPoint\": {\r\n        \"floorId\": \"floortesteid2\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 2\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 3\r\n            }\r\n    },\r\n    \"passageEndPoint\": {\r\n        \"floorId\": \"floortesteid3\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 2\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 3\r\n            }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/passages",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"passages"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "List Passages Between Buildings",
					"item": [
						{
							"name": "Valid",
							"item": [
								{
									"name": "Valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/passages/filter?firstBuildingId=testeid1&lastBuildingId=testeid2",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"passages",
												"filter"
											],
											"query": [
												{
													"key": "firstBuildingId",
													"value": "testeid1"
												},
												{
													"key": "lastBuildingId",
													"value": "testeid2"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invalid",
							"item": [
								{
									"name": "Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 404\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/passages/filter?firstBuildingId=teste-id1&lastBuildingId=teste-id-naoexiste",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"passages",
												"filter"
											],
											"query": [
												{
													"key": "firstBuildingId",
													"value": "teste-id1"
												},
												{
													"key": "lastBuildingId",
													"value": "teste-id-naoexiste"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Edit Passage",
					"item": [
						{
							"name": "Valid",
							"item": [
								{
									"name": "Valid Both Floors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"passageStartPoint\": {\r\n        \"floorId\": \"floortesteid7\"\r\n    },\r\n    \"passageEndPoint\": {\r\n        \"floorId\": \"floortesteid8\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/passages/passage1",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"passages",
												"passage1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid One Floor",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"passageStartPoint\": {\r\n        \"floorId\": \"floortesteid2\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/passages/passage1",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"passages",
												"passage1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid Both Coordinates",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"passageStartPoint\": {\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 2\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 3\r\n            }\r\n    },\r\n    \"passageEndPoint\": {\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 2\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 3\r\n            }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/passages/passage1",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"passages",
												"passage1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid Both Start Point Coordinates",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"passageStartPoint\": {\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 1,\r\n                \"y\": 0\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 2,\r\n                \"y\": 0\r\n            }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/passages/passage1",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"passages",
												"passage1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid Both End Point Coordinates",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"passageEndPoint\": {\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 1,\r\n                \"y\": 0\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 2,\r\n                \"y\": 0\r\n            }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/passages/passage1",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"passages",
												"passage1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid Both Coordinates - One of the Coordinates stays the same",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"passageStartPoint\": {\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 1\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 2\r\n            }\r\n    },\r\n    \"passageEndPoint\": {\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 1\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 2\r\n            }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/passages/passage1",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"passages",
												"passage1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid All",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"passageStartPoint\": {\r\n        \"floorId\": \"floortesteid1\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 0\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 1\r\n            }\r\n    },\r\n    \"passageEndPoint\": {\r\n        \"floorId\": \"floortesteid3\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 0\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 1\r\n            }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/passages/passage1",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"passages",
												"passage1"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invalid",
							"item": [
								{
									"name": "Passage Not Found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 404\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"passageStartPoint\": {\r\n        \"floorId\": \"floor-teste-id1\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 0\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 1\r\n            }\r\n    },\r\n    \"passageEndPoint\": {\r\n        \"floorId\": \"floor-teste-id3\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 0\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 1\r\n            }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/passages/passagenotfound",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"passages",
												"passagenotfound"
											]
										}
									},
									"response": []
								},
								{
									"name": "Floor Not Found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 404\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"passageStartPoint\": {\r\n        \"floorId\": \"floor-teste-notfound\"\r\n    }    \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/passages/passage1",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"passages",
												"passage1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Floor - Passage Already Exists In the Floor For The Building",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 409\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(409);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"passageStartPoint\": {\r\n        \"floorId\": \"floortesteid1\"\r\n\r\n    },\r\n    \"passageEndPoint\": {\r\n        \"floorId\": \"floortesteid3\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/passages/passagetest2",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"passages",
												"passagetest2"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Floor - Same Building",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"passageStartPoint\": {\r\n        \"floorId\": \"floortesteid1\"\r\n\r\n    },\r\n    \"passageEndPoint\": {\r\n        \"floorId\": \"floortesteid2\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/passages/passage1",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"passages",
												"passage1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Position Occupied",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"passageEndPoint\": {\r\n        \"floorId\": \"floortesteid3\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 4\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 5\r\n            }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/passages/passage1",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"passages",
												"passage1"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Room",
			"item": [
				{
					"name": "Bootstrap",
					"item": [
						{
							"name": "Building Creation 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"domainId\": \"buildingRoomId1\",\r\n    \"buildingName\": \"Room Building 1\",\r\n    \"buildingDimensions\": {\r\n        \"width\": 30,\r\n        \"length\": 30\r\n    },\r\n    \"buildingDescription\": \"description\",\r\n    \"buildingCode\": \"ROOM1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"{{PREFIX}}",
										"{{CAMPUS_API}}",
										"buildings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Building Creation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"domainId\": \"buildingRoomId2\",\r\n    \"buildingName\": \"Room Building 2\",\r\n    \"buildingDimensions\": {\r\n        \"width\": 30,\r\n        \"length\": 30\r\n    },\r\n    \"buildingDescription\": \"description\",\r\n    \"buildingCode\": \"ROOM2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"{{PREFIX}}",
										"{{CAMPUS_API}}",
										"buildings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Floor Creation 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"domainId\": \"floorRoomId1\",\r\n    \"buildingId\" : \"buildingRoomId1\",\r\n    \"floorDescription\" : \"Postman Floor 1\",\r\n    \"floorNumber\" : 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"{{PREFIX}}",
										"{{CAMPUS_API}}",
										"floors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Floor Creation 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"domainId\": \"floorRoomId2\",\r\n    \"buildingId\" : \"buildingRoomId2\",\r\n    \"floorDescription\" : \"Postman Floor 2\",\r\n    \"floorNumber\" : 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"{{PREFIX}}",
										"{{CAMPUS_API}}",
										"floors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Elevator Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"domainId\": \"elevatorRoomId\",\r\n    \"brand\": \"marca\",\r\n    \"model\": \"modelo\",\r\n    \"serialNumber\": \"734324\",\r\n    \"description\" : \"teste description\",\r\n    \"elevatorPosition\": {\r\n        \"xposition\": 25,\r\n        \"yposition\": 25\r\n    },\r\n    \"orientation\": \"EAST\",\r\n    \"floors\": [\"floorRoomId1\"],\r\n    \"building\" : \"buildingRoomId1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/elevators",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"{{PREFIX}}",
										"{{CAMPUS_API}}",
										"elevators"
									]
								}
							},
							"response": []
						},
						{
							"name": "Passage Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"domainId\": \"passageRoomId\",\r\n    \"passageStartPoint\": {\r\n        \"floorId\": \"floorRoomId1\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 0\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 1\r\n            }\r\n    },\r\n    \"passageEndPoint\": {\r\n        \"floorId\": \"floorRoomId2\",\r\n        \"firstCoordinates\": \r\n            {\r\n                \"x\": 0,\r\n                \"y\": 0\r\n            },\r\n        \"lastCoordinates\":\r\n            {\r\n                \"x\": 0,\r\n                \"y\": 1\r\n            }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/passages",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"{{PREFIX}}",
										"{{CAMPUS_API}}",
										"passages"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create Room",
					"item": [
						{
							"name": "Sucess",
							"item": [
								{
									"name": "Valid Default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"thisIsRoom\",\r\n    \"name\": \"room1\",\r\n    \"description\": \"something\",\r\n    \"category\": \"LABORATORY\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 4,\r\n            \"yPosition\": 4\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 6,\r\n            \"yPosition\": 6\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 5,\r\n        \"yPosition\": 6\r\n    },\r\n    \"doorOrientation\": \"SOUTH\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Name with spaces/tabs before/after",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"    room2        \",\r\n    \"description\": \"something\",\r\n    \"category\": \"LABORATORY\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 20,\r\n            \"yPosition\": 7\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 22,\r\n            \"yPosition\": 9\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 21,\r\n        \"yPosition\": 9\r\n    },\r\n    \"doorOrientation\": \"SOUTH\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Description with spaces/tabs before/after",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room3\",\r\n    \"description\": \"        something       \",\r\n    \"category\": \"LABORATORY\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 3,\r\n            \"yPosition\": 15\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 6,\r\n            \"yPosition\": 22\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 6,\r\n        \"yPosition\": 18\r\n    },\r\n    \"doorOrientation\": \"EAST\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Category with spaces/tabs before/after",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room4\",\r\n    \"description\": \"something\",\r\n    \"category\": \"   LABORATORY      \",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 26,\r\n            \"yPosition\": 12\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 27,\r\n            \"yPosition\": 15\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 27,\r\n        \"yPosition\": 13\r\n    },\r\n    \"doorOrientation\": \"EAST\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invalid Name",
							"item": [
								{
									"name": "Fail with Empty Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"\",\r\n    \"description\": \"something\",\r\n    \"category\": \"LABORATORY\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 2,\r\n            \"yPosition\": 2\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 5,\r\n            \"yPosition\": 5\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 5,\r\n        \"yPosition\": 4\r\n    },\r\n    \"doorOrientation\": \"NORTH\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Name too long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"This name is going to be very long, it has to break the 50 caracthers mark in order to fail the insertion of a new room\",\r\n    \"description\": \"something\",\r\n    \"category\": \"LABORATORY\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 1,\r\n            \"yPosition\": 29\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 2,\r\n            \"yPosition\": 30\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 1,\r\n        \"yPosition\": 30\r\n    },\r\n    \"doorOrientation\": \"NORTH\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Name not unique",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 409\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(409);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room1\",\r\n    \"description\": \"something\",\r\n    \"category\": \"LABORATORY\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 2,\r\n            \"yPosition\": 2\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 5,\r\n            \"yPosition\": 5\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 5,\r\n        \"yPosition\": 4\r\n    },\r\n    \"doorOrientation\": \"EAST\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Null Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": null,\r\n    \"description\": \"something\",\r\n    \"category\": \"LABORATORY\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 2,\r\n            \"yPosition\": 2\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 5,\r\n            \"yPosition\": 5\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 5,\r\n        \"yPosition\": 4\r\n    },\r\n    \"doorOrientation\": \"NORTH\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Name not alphanumeric",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room1__@@\",\r\n    \"description\": \"something\",\r\n    \"category\": \"LABORATORY\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 1,\r\n            \"yPosition\": 29\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 2,\r\n            \"yPosition\": 30\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 1,\r\n        \"yPosition\": 30\r\n    },\r\n    \"doorOrientation\": \"NORTH\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Name with only spaces/tabs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"       \",\r\n    \"description\": \"something\",\r\n    \"category\": \"LABORATORY\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 1,\r\n            \"yPosition\": 29\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 2,\r\n            \"yPosition\": 30\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 1,\r\n        \"yPosition\": 30\r\n    },\r\n    \"doorOrientation\": \"NORTH\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invalid Description",
							"item": [
								{
									"name": "Fail with Empty Description",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"\",\r\n    \"category\": \"LABORATORY\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 2,\r\n            \"yPosition\": 2\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 5,\r\n            \"yPosition\": 5\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 5,\r\n        \"yPosition\": 4\r\n    },\r\n    \"doorOrientation\": \"NORTH\",\r\n    \"floorId\": \"floor-room-id1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Description too long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"This description is going to be way too long for this field. In order to accomplish such complicated task I have to write a lot. That is because the limit is huge. It is around 250 caracthers, so yeah it is a lot of caracthers\",\r\n    \"category\": \"LABORATORY\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 2,\r\n            \"yPosition\": 2\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 5,\r\n            \"yPosition\": 5\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 5,\r\n        \"yPosition\": 4\r\n    },\r\n    \"doorOrientation\": \"NORTH\",\r\n    \"floorId\": \"floor-room-id1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Null Description",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": null,\r\n    \"category\": \"LABORATORY\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 2,\r\n            \"yPosition\": 2\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 5,\r\n            \"yPosition\": 5\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 5,\r\n        \"yPosition\": 4\r\n    },\r\n    \"doorOrientation\": \"NORTH\",\r\n    \"floorId\": \"floor-room-id1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Description not alphanumeric",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"something @@ __\",\r\n    \"category\": \"LABORATORY\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 2,\r\n            \"yPosition\": 2\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 5,\r\n            \"yPosition\": 5\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 5,\r\n        \"yPosition\": 4\r\n    },\r\n    \"doorOrientation\": \"NORTH\",\r\n    \"floorId\": \"floor-room-id1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Description with only spaces/tabs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"       \",\r\n    \"category\": \"LABORATORY\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 2,\r\n            \"yPosition\": 2\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 5,\r\n            \"yPosition\": 5\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 5,\r\n        \"yPosition\": 4\r\n    },\r\n    \"doorOrientation\": \"NORTH\",\r\n    \"floorId\": \"floor-room-id1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invalid Category",
							"item": [
								{
									"name": "Fail with Empty Category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"something\",\r\n    \"category\": \"\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 2,\r\n            \"yPosition\": 2\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 5,\r\n            \"yPosition\": 5\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 5,\r\n        \"yPosition\": 4\r\n    },\r\n    \"doorOrientation\": \"NORTH\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Null Category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"something\",\r\n    \"category\": null,\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 2,\r\n            \"yPosition\": 2\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 5,\r\n            \"yPosition\": 5\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 5,\r\n        \"yPosition\": 4\r\n    },\r\n    \"doorOrientation\": \"NORTH\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Category with only spaces/tabs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"something\",\r\n    \"category\": \"       \",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 1,\r\n            \"yPosition\": 29\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 2,\r\n            \"yPosition\": 30\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 1,\r\n        \"yPosition\": 30\r\n    },\r\n    \"doorOrientation\": \"NORTH\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Category with invalid value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"something\",\r\n    \"category\": \"TEST\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 1,\r\n            \"yPosition\": 6\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 2,\r\n            \"yPosition\": 7\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 2,\r\n        \"yPosition\": 6\r\n    },\r\n    \"doorOrientation\": \"NORTH\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invalid Dimensions",
							"item": [
								{
									"name": "Fail with Empty Dimensions InitialPosition",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"something\",\r\n    \"category\": \"LABORATORY\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": \"\",\r\n            \"yPosition\": \"\"\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 5,\r\n            \"yPosition\": 5\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 5,\r\n        \"yPosition\": 4\r\n    },\r\n    \"doorOrientation\": \"NORTH\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Empty Dimensions FinalPosition",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"something\",\r\n    \"category\": \"\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 2,\r\n            \"yPosition\": 2\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": \"\",\r\n            \"yPosition\": \"\"\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 5,\r\n        \"yPosition\": 4\r\n    },\r\n    \"doorOrientation\": \"NORTH\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Null Dimensions InitialPosition",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": null,\r\n    \"description\": null,\r\n    \"category\": null,\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": null,\r\n            \"yPosition\": null\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 5,\r\n            \"yPosition\": 5\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 5,\r\n        \"yPosition\": 4\r\n    },\r\n    \"doorOrientation\": \"NORTH\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Null Dimensions FinalPosition",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"something\",\r\n    \"category\": \"laboratory\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 2,\r\n            \"yPosition\": 2\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": null,\r\n            \"yPosition\": null\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 5,\r\n        \"yPosition\": 4\r\n    },\r\n    \"doorOrientation\": \"NORTH\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Dimensions InitialPosition with only spaces/tabs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"something\",\r\n    \"category\": \"LABORATORY\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": \"      \",\r\n            \"yPosition\": \"       \"\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 5,\r\n            \"yPosition\": 5\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 5,\r\n        \"yPosition\": 4\r\n    },\r\n    \"doorOrientation\": \"NORTH\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Dimensions FinalPosition with only spaces/tabs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"something\",\r\n    \"category\": \"LABORATORY\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 5,\r\n            \"yPosition\": 5\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": \"      \",\r\n            \"yPosition\": \"       \"\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 5,\r\n        \"yPosition\": 4\r\n    },\r\n    \"doorOrientation\": \"NORTH\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Dimensions InitialPosition with negative value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"something\",\r\n    \"category\": \"laboratory\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": -2,\r\n            \"yPosition\": -2\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 5,\r\n            \"yPosition\": 5\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 5,\r\n        \"yPosition\": 4\r\n    },\r\n    \"doorOrientation\": \"NORTH\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Dimensions InitialPosition with negative value Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"something\",\r\n    \"category\": \"laboratory\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 2,\r\n            \"yPosition\": 2\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": -5,\r\n            \"yPosition\": -5\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 5,\r\n        \"yPosition\": 4\r\n    },\r\n    \"doorOrientation\": \"NORTH\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with InitialPosition Greater Than FinalPosition",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"something\",\r\n    \"category\": \"laboratory\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 20,\r\n            \"yPosition\": 20\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 5,\r\n            \"yPosition\": 5\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 5,\r\n        \"yPosition\": 4\r\n    },\r\n    \"doorOrientation\": \"NORTH\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with InitialPosition Greater Than FinalPosition Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"something\",\r\n    \"category\": \"laboratory\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 50,\r\n            \"yPosition\": 50\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 52,\r\n            \"yPosition\": 52\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 50,\r\n        \"yPosition\": 51\r\n    },\r\n    \"doorOrientation\": \"NORTH\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Passage already in the given area",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"something\",\r\n    \"category\": \"laboratory\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 0,\r\n            \"yPosition\": 0\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 2,\r\n            \"yPosition\": 2\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 2,\r\n        \"yPosition\": 2\r\n    },\r\n    \"doorOrientation\": \"EAST\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Elevator already in the given area",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"something\",\r\n    \"category\": \"laboratory\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 20,\r\n            \"yPosition\": 20\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 25,\r\n            \"yPosition\": 25\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 25,\r\n        \"yPosition\": 22\r\n    },\r\n    \"doorOrientation\": \"EAST\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Room already in the given area",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"something\",\r\n    \"category\": \"laboratory\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 5,\r\n            \"yPosition\": 5\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 7,\r\n            \"yPosition\": 7\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 7,\r\n        \"yPosition\": 5\r\n    },\r\n    \"doorOrientation\": \"EAST\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Room blocking another's door",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"something\",\r\n    \"category\": \"LABORATORY\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 4,\r\n            \"yPosition\": 7\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 6,\r\n            \"yPosition\": 10\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 5,\r\n        \"yPosition\": 10\r\n    },\r\n    \"doorOrientation\": \"SOUTH\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invalid Door Position",
							"item": [
								{
									"name": "Fail with Empty DoorPosition",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"something\",\r\n    \"category\": \"LABORATORY\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 28,\r\n            \"yPosition\": 28\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 29,\r\n            \"yPosition\": 29\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": \"\",\r\n        \"yPosition\": \"\"\r\n    },\r\n    \"doorOrientation\": \"NORTH\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Null DoorPosition",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"something\",\r\n    \"category\": \"laboratory\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 2,\r\n            \"yPosition\": 2\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 5,\r\n            \"yPosition\": 5\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": null,\r\n        \"yPosition\": null\r\n    },\r\n    \"doorOrientation\": \"NORTH\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with DoorPosition middle of room",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"something\",\r\n    \"category\": \"laboratory\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 28,\r\n            \"yPosition\": 28\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 29,\r\n            \"yPosition\": 29\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 3,\r\n        \"yPosition\": 3\r\n    },\r\n    \"doorOrientation\": \"NORTH\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with DoorPosition with only spaces/tabs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"something\",\r\n    \"category\": \"LABORATORY\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 21,\r\n            \"yPosition\": 21\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 25,\r\n            \"yPosition\": 25\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": \"      \",\r\n        \"yPosition\": \"      \"\r\n    },\r\n    \"doorOrientation\": \"NORTH\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with DoorPosition with negative value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"something\",\r\n    \"category\": \"laboratory\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 14,\r\n            \"yPosition\": 25\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 15,\r\n            \"yPosition\": 26\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": -5,\r\n        \"yPosition\": -4\r\n    },\r\n    \"doorOrientation\": \"NORTH\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with door facing another room",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"something\",\r\n    \"category\": \"LABORATORY\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 7,\r\n            \"yPosition\": 4\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 9,\r\n            \"yPosition\": 6\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 7,\r\n        \"yPosition\": 5\r\n    },\r\n    \"doorOrientation\": \"WEST\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with door facing an elevator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"something\",\r\n    \"category\": \"LABORATORY\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 22,\r\n            \"yPosition\": 24\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 24,\r\n            \"yPosition\": 26\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 24,\r\n        \"yPosition\": 25\r\n    },\r\n    \"doorOrientation\": \"EAST\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with door facing an elevator Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"something\",\r\n    \"category\": \"LABORATORY\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 0,\r\n            \"yPosition\": 2\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 1,\r\n            \"yPosition\": 4\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 0,\r\n        \"yPosition\": 2\r\n    },\r\n    \"doorOrientation\": \"NORTH\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invalid Door Orientation",
							"item": [
								{
									"name": "Fail with Empty Door Orientation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"something\",\r\n    \"category\": \"other\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 2,\r\n            \"yPosition\": 2\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 5,\r\n            \"yPosition\": 5\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 5,\r\n        \"yPosition\": 4\r\n    },\r\n    \"doorOrientation\": \"\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Empty Door Orientation Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"something\",\r\n    \"category\": \"other\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 2,\r\n            \"yPosition\": 2\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 5,\r\n            \"yPosition\": 5\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 5,\r\n        \"yPosition\": 4\r\n    },\r\n    \"doorOrientation\": \"\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Null Door Orientation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"something\",\r\n    \"category\": \"other\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 2,\r\n            \"yPosition\": 2\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 5,\r\n            \"yPosition\": 5\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 5,\r\n        \"yPosition\": 4\r\n    },\r\n    \"doorOrientation\": null,\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Door Orientation with only spaces/tabs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"something\",\r\n    \"category\": \"other\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 1,\r\n            \"yPosition\": 29\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 2,\r\n            \"yPosition\": 30\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 1,\r\n        \"yPosition\": 30\r\n    },\r\n    \"doorOrientation\": \"             \",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Door Orientation with invalid value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"something\",\r\n    \"category\": \"other\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 1,\r\n            \"yPosition\": 6\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 2,\r\n            \"yPosition\": 7\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 2,\r\n        \"yPosition\": 6\r\n    },\r\n    \"doorOrientation\": \"INVALID\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Invalid Door Orientation with given door Position",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"something\",\r\n    \"category\": \"other\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 18,\r\n            \"yPosition\": 0\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 20,\r\n            \"yPosition\": 2\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 20,\r\n        \"yPosition\": 2\r\n    },\r\n    \"doorOrientation\": \"WEST\",\r\n    \"floorId\": \"floorRoomId1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invalid FloorId",
							"item": [
								{
									"name": "Fail with Empty FloorId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"something\",\r\n    \"category\": \"LABORATORY\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 14,\r\n            \"yPosition\": 24\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 15,\r\n            \"yPosition\": 25\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 5,\r\n        \"yPosition\": 4\r\n    },\r\n    \"doorOrientation\": \"NORTH\",\r\n    \"floorId\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Null FloorId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"something\",\r\n    \"category\": \"laboratory\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 14,\r\n            \"yPosition\": 24\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 15,\r\n            \"yPosition\": 25\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 4,\r\n        \"yPosition\": 5\r\n    },\r\n    \"doorOrientation\": \"NORTH\",\r\n    \"floorId\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with FloorId that doesn't exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 404\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(404);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"something\",\r\n    \"category\": \"laboratory\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 14,\r\n            \"yPosition\": 24\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 15,\r\n            \"yPosition\": 25\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 4,\r\n        \"yPosition\": 5\r\n    },\r\n    \"doorOrientation\": \"NORTH\",\r\n    \"floorId\": \"floor-not-id\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with FloorId with only spaces/tabs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 404\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(404);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"room10\",\r\n    \"description\": \"something\",\r\n    \"category\": \"laboratory\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 14,\r\n            \"yPosition\": 24\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 15,\r\n            \"yPosition\": 25\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 4,\r\n        \"yPosition\": 5\r\n    },\r\n    \"doorOrientation\": \"NORTH\",\r\n    \"floorId\": \"        \"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{CAMPUS_API}}",
												"rooms"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "List Rooms",
					"item": [
						{
							"name": "List All Rooms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"{{PREFIX}}",
										"{{CAMPUS_API}}",
										"rooms"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Rooms By Floor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms/floorRoomId1",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"{{PREFIX}}",
										"{{CAMPUS_API}}",
										"rooms",
										"floorRoomId1"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Robisep Type",
			"item": [
				{
					"name": "Create RobisepType",
					"item": [
						{
							"name": "Sucess",
							"item": [
								{
									"name": "Valid TaskType with spaces/tabs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"designation\": \"robisepType2\",\r\n    \"brand\": \"brand\",\r\n    \"model\": \"model\",\r\n    \"tasksType\": [\"     Transport  \", \"     Surveillance      \"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robisepsType",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robisepsType"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid Model with spaces/tabs Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"designation\": \"robisepType3\",\r\n    \"brand\": \"brand\",\r\n    \"model\": \"   model      \",\r\n    \"tasksType\": [\"Transport \", \"Surveillance\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robisepsType",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robisepsType"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid Brand with spaces/tabs Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"designation\": \"robisepType4\",\r\n    \"brand\": \"      brand    \",\r\n    \"model\": \"model\",\r\n    \"tasksType\": [\"Transport \", \"Surveillance\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robisepsType",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robisepsType"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid Designation with spaces/tabs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"designation\": \"    robisepType5    \",\r\n    \"brand\": \"brand\",\r\n    \"model\": \"model\",\r\n    \"tasksType\": [\"Transport \", \"Surveillance\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robisepsType",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robisepsType"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid RobisepType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"designation\": \"robisepType1\",\r\n    \"brand\": \"brand\",\r\n    \"model\": \"model\",\r\n    \"tasksType\": [\"Transport \", \"Surveillance\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robisepsType",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robisepsType"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid no case sensitive TaskType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"designation\": \"robisepType6\",\r\n    \"brand\": \"brand\",\r\n    \"model\": \"model\",\r\n    \"tasksType\": [\"TrAnsPOrt \", \"SuRVeiLLAncE\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robisepsType",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robisepsType"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invalid Designation",
							"item": [
								{
									"name": "Fail with Designation too Long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"designation\": \"Way too long designation, it must break\",\r\n    \"brand\": \"brand\",\r\n    \"model\": \"model\",\r\n    \"tasksType\": [\"Transport \", \"Surveillance\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robisepsType",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robisepsType"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Designation not alphanumeric",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"designation\": \"robisep__@\",\r\n    \"brand\": \"brand\",\r\n    \"model\": \"model\",\r\n    \"tasksType\": [\"Transport \", \"Surveillance\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robisepsType",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robisepsType"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Null Designation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"designation\": null,\r\n    \"brand\": \"brand\",\r\n    \"model\": \"model\",\r\n    \"tasksType\": [\"Transport \", \"Surveillance\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robisepsType",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robisepsType"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Empty Designation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"designation\": \"\",\r\n    \"brand\": \"brand\",\r\n    \"model\": \"model\",\r\n    \"tasksType\": [\"Transport \", \"Surveillance\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robisepsType",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robisepsType"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Designation not unique",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 409\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(409);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"designation\": \"robisepType1\",\r\n    \"brand\": \"brand\",\r\n    \"model\": \"model\",\r\n    \"tasksType\": [\"Transport \", \"Surveillance\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robisepsType",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robisepsType"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Only Spaces/Tabs Designation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"designation\": \"                \",\r\n    \"brand\": \"brand\",\r\n    \"model\": \"model\",\r\n    \"tasksType\": [\"Transport \", \"Surveillance\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robisepsType",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robisepsType"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invalid Brand",
							"item": [
								{
									"name": "Fail with Brand too Long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"designation\": \"robisep10\",\r\n    \"brand\": \"way too long brand, I will keep writing until it breaks\",\r\n    \"model\": \"model\",\r\n    \"tasksType\": [\"Transport \", \"Surveillance\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robisepsType",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robisepsType"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Null Brand",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"designation\": \"robisep10\",\r\n    \"brand\": null,\r\n    \"model\": \"model\",\r\n    \"tasksType\": [\"Transport \", \"Surveillance\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robisepsType",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robisepsType"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Empty Brand",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"designation\": \"robisep10\",\r\n    \"brand\": \"\",\r\n    \"model\": \"model\",\r\n    \"tasksType\": [\"Transport \", \"Surveillance\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robisepsType",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robisepsType"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Only Spaces/Tabs Brand",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"designation\": \"robisep10\",\r\n    \"brand\": \"           \",\r\n    \"model\": \"model\",\r\n    \"tasksType\": [\"Transport \", \"Surveillance\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robisepsType",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robisepsType"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invalid Model",
							"item": [
								{
									"name": "Fail with Model too Long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"designation\": \"robisep10\",\r\n    \"brand\": \"brand\",\r\n    \"model\": \"way too long brand, I will keep writing until it breaks, this is still not enough so a bit more wont hurt. Maybe a little bit more\",\r\n    \"tasksType\": [\"Transport \", \"Surveillance\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robisepsType",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robisepsType"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Null Model",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"designation\": \"robisep10\",\r\n    \"brand\": \"brand\",\r\n    \"model\": null,\r\n    \"tasksType\": [\"Transport \", \"Surveillance\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robisepsType",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robisepsType"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Empty Model",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"designation\": \"robisep10\",\r\n    \"brand\": \"brand\",\r\n    \"model\": \"\",\r\n    \"tasksType\": [\"Transport \", \"Surveillance\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robisepsType",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robisepsType"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Only Spaces/Tabs Model",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"designation\": \"robisep10\",\r\n    \"brand\": \"brand\",\r\n    \"model\": \"           \",\r\n    \"tasksType\": [\"Transport \", \"Surveillance\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robisepsType",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robisepsType"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invalid TaskType",
							"item": [
								{
									"name": "Fail with Invalid TaskTypes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"designation\": \"robisep10\",\r\n    \"brand\": \"brand\",\r\n    \"model\": \"model\",\r\n    \"tasksType\": [\"Teste \", \"Teste2\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robisepsType",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robisepsType"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Null TaskType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"designation\": \"robisep10\",\r\n    \"brand\": \"brand\",\r\n    \"model\": \"model\",\r\n    \"tasksType\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robisepsType",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robisepsType"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail with Empty TaskType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"designation\": \"robisep10\",\r\n    \"brand\": \"brand\",\r\n    \"model\": \"model\",\r\n    \"tasksType\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robisepsType",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robisepsType"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Robisep",
			"item": [
				{
					"name": "List Robisep - Empty",
					"item": [
						{
							"name": "List All Robiseps - Empty list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"{{PREFIX}}",
										"{{FLEET_API}}",
										"robiseps"
									]
								}
							},
							"response": []
						},
						{
							"name": "List All Robiseps with or TaskType - Empty list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps/filter?taskType=SURVEILLANCE,TRANSPORT",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"{{PREFIX}}",
										"{{FLEET_API}}",
										"robiseps",
										"filter"
									],
									"query": [
										{
											"key": "taskType",
											"value": "SURVEILLANCE,TRANSPORT"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List All Robiseps with or Nickname - Empty list Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps/filter?nickname=robisep1",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"{{PREFIX}}",
										"{{FLEET_API}}",
										"robiseps",
										"filter"
									],
									"query": [
										{
											"key": "nickname",
											"value": "robisep1"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create Robisep",
					"item": [
						{
							"name": "Bootstrap",
							"item": [
								{
									"name": "RobisepType Creation 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"1\",\r\n    \"designation\": \"type A\",\r\n    \"brand\": \"brand\",\r\n    \"model\": \"model\",\r\n    \"tasksType\": [\"Transport\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robisepsType",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robisepsType"
											]
										}
									},
									"response": []
								},
								{
									"name": "RobisepType Creation 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"domainId\": \"2\",\r\n    \"designation\": \"type B\",\r\n    \"brand\": \"brand\",\r\n    \"model\": \"model\",\r\n    \"tasksType\": [\"Surveillance\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robisepsType",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robisepsType"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Success",
							"item": [
								{
									"name": "Valid Robisep",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nickname\": \"robisep1\",\r\n    \"serialNumber\": \"111111\",\r\n    \"code\": \"picker1\",\r\n    \"description\": \"This is our first test for a robisep creation\",\r\n    \"robisepTypeId\": \"1\",\r\n    \"roomId\": \"thisIsRoom\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid Nickname with spaces/tabs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nickname\": \"   robot2        \",\r\n    \"serialNumber\": \"111112\",\r\n    \"code\": \"picker2\",\r\n    \"description\": \"This is our second test for a robisep creation\",\r\n    \"robisepTypeId\": \"2\",\r\n    \"roomId\": \"thisIsRoom\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid SerialNumber with spaces/tabs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nickname\": \"robot3\",\r\n    \"serialNumber\": \"   111113       \",\r\n    \"code\": \"picker3\",\r\n    \"description\": \"This is our first test for a robisep creation\",\r\n    \"robisepTypeId\": \"1\",\r\n    \"roomId\": \"thisIsRoom\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid Code with spaces/tabs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nickname\": \"robot4\",\r\n    \"serialNumber\": \"111114\",\r\n    \"code\": \"         picker4     \",\r\n    \"description\": \"This is our first test for a robisep creation\",\r\n    \"robisepTypeId\": \"2\",\r\n    \"roomId\": \"thisIsRoom\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid Description with spaces/tabs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nickname\": \"robot5\",\r\n    \"serialNumber\": \"111115\",\r\n    \"code\": \"picker5\",\r\n    \"description\": \"             This is our first test for a robisep creation              \",\r\n    \"robisepTypeId\": \"2\",\r\n    \"roomId\": \"thisIsRoom\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid Creation - Null Description",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nickname\": \"robot6\",\r\n    \"serialNumber\": \"111116\",\r\n    \"code\": \"picker6\",\r\n    \"description\": null,\r\n    \"robisepTypeId\": \"2\",\r\n    \"roomId\": \"thisIsRoom\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invalid Nickname",
							"item": [
								{
									"name": "Empty Nickname",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nickname\": \"\",\r\n    \"serialNumber\": \"123456\",\r\n    \"code\": \"picker\",\r\n    \"description\": \"something\",\r\n    \"robisepTypeId\": \"1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nickname too long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nickname\": \"Way too long nickname, the system will not accept this\",\r\n    \"serialNumber\": \"123456\",\r\n    \"code\": \"picker\",\r\n    \"description\": \"something\",\r\n    \"robisepTypeId\": \"1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								},
								{
									"name": "Null Nickname",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nickname\": null,\r\n    \"serialNumber\": \"123456\",\r\n    \"code\": \"picker10\",\r\n    \"description\": \"something\",\r\n    \"robisepTypeId\": \"2\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nickname not alphanumeric",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nickname\": \"robisep_\",\r\n    \"serialNumber\": \"123456\",\r\n    \"code\": \"picker10\",\r\n    \"description\": \"something\",\r\n    \"robisepTypeId\": \"1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nickname with only spaces/tabs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nickname\": \"                   \",\r\n    \"serialNumber\": \"123456\",\r\n    \"code\": \"picker\",\r\n    \"description\": \"something\",\r\n    \"robisepTypeId\": \"2\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invalid Code",
							"item": [
								{
									"name": "Empty Code",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nickname\": \"robisep10\",\r\n    \"serialNumber\": \"123456\",\r\n    \"code\": \"\",\r\n    \"description\": \"something\",\r\n    \"robisepTypeId\": \"2\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								},
								{
									"name": "Code too long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nickname\": \"robisep10\",\r\n    \"serialNumber\": \"123456\",\r\n    \"code\": \"Way too long code, the system will not accept this\",\r\n    \"description\": \"something\",\r\n    \"robisepTypeId\": \"2\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								},
								{
									"name": "Code not unique",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 409\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(409);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nickname\": \"robisep10\",\r\n    \"serialNumber\": \"123456\",\r\n    \"code\": \"picker1\",\r\n    \"description\": \"something\",\r\n    \"robisepTypeId\": \"2\",\r\n    \"roomId\": \"thisIsRoom\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								},
								{
									"name": "Null Code",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nickname\": \"robisep10\",\r\n    \"serialNumber\": \"123456\",\r\n    \"code\": null,\r\n    \"description\": \"something\",\r\n    \"robisepTypeId\": \"2\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								},
								{
									"name": "Code not alphanumeric",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nickname\": \"robisep10\",\r\n    \"serialNumber\": \"123456\",\r\n    \"code\": \"picker_\",\r\n    \"description\": \"something\",\r\n    \"robisepTypeId\": \"2\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								},
								{
									"name": "Code with only spaces/tabs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nickname\": \"robisep10\",\r\n    \"serialNumber\": \"123456\",\r\n    \"code\": \"                   \",\r\n    \"description\": \"something\",\r\n    \"robisepTypeId\": \"2\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invalid SerialNumber",
							"item": [
								{
									"name": "Empty SerialNumber",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nickname\": \"robisep10\",\r\n    \"serialNumber\": \"\",\r\n    \"code\": \"picker10\",\r\n    \"description\": \"something\",\r\n    \"robisepTypeId\": \"2\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								},
								{
									"name": "SerialNumber too long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nickname\": \"robisep10\",\r\n    \"serialNumber\": \"Way too long serialNumber, the system will not accept this\",\r\n    \"code\": \"picker10\",\r\n    \"description\": \"something\",\r\n    \"robisepTypeId\": \"2\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								},
								{
									"name": "SerialNumber not unique within the same type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 409\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(409);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nickname\": \"robisep10\",\r\n    \"serialNumber\": \"111111\",\r\n    \"code\": \"picker10\",\r\n    \"description\": \"something\",\r\n    \"robisepTypeId\": \"1\",\r\n    \"roomId\": \"thisIsRoom\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								},
								{
									"name": "Null SerialNumber",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nickname\": \"robisep10\",\r\n    \"serialNumber\": null,\r\n    \"code\": \"picker10\",\r\n    \"description\": \"something\",\r\n    \"robisepTypeId\": \"2\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								},
								{
									"name": "SerialNumber not alphanumeric",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nickname\": \"robisep10\",\r\n    \"serialNumber\": \"123456_\",\r\n    \"code\": \"picker_\",\r\n    \"description\": \"something\",\r\n    \"robisepTypeId\": \"2\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								},
								{
									"name": "SerialNumber with only spaces/tabs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nickname\": \"robisep10\",\r\n    \"serialNumber\": \"                   \",\r\n    \"code\": \"picker10\",\r\n    \"description\": \"something\",\r\n    \"robisepTypeId\": \"2\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invalid Description",
							"item": [
								{
									"name": "Description too long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nickname\": \"robisep10\",\r\n    \"serialNumber\": \"123456\",\r\n    \"code\": \"picker10\",\r\n    \"description\": \"Way too long description field input, the system will not accept this. The problem is that the capacity of the field description, the one I am writting on, is astronomic. If I am not wrong, the limite is like 250 caracthers. So, in order to break that, long sentences, and probably pointless one, will be introduce.\",\r\n    \"robisepTypeId\": \"2\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								},
								{
									"name": "Description not alphanumeric",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nickname\": \"robisep10\",\r\n    \"serialNumber\": \"123456_\",\r\n    \"code\": \"picker10\",\r\n    \"description\": \"something_\",\r\n    \"robisepTypeId\": \"2\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								},
								{
									"name": "Description with only spaces/tabs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nickname\": \"robisep10\",\r\n    \"serialNumber\": \"123456\",\r\n    \"code\": \"picker10\",\r\n    \"description\": \"                   \",\r\n    \"robisepTypeId\": \"2\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								},
								{
									"name": "Empty Description",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nickname\": \"robot5\",\r\n    \"serialNumber\": \"111116\",\r\n    \"code\": \"picker6\",\r\n    \"description\": \"\",\r\n    \"robisepTypeId\": \"2\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invalid RobisepTypeId",
							"item": [
								{
									"name": "RobisepTypeID that does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 404\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(404);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nickname\": \"robisep10\",\r\n    \"serialNumber\": \"123456\",\r\n    \"code\": \"picker10\",\r\n    \"description\": \"something\",\r\n    \"robisepTypeId\": \"ID-432432-432432\",\r\n    \"roomId\": \"thisIsRoom\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								},
								{
									"name": "Empty RobisepTypeID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nickname\": \"robisep10\",\r\n    \"serialNumber\": \"123456\",\r\n    \"code\": \"picker10\",\r\n    \"description\": \"something\",\r\n    \"robisepTypeId\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								},
								{
									"name": "Null RobisepTypeID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nickname\": \"robisep10\",\r\n    \"serialNumber\": \"123456\",\r\n    \"code\": \"picker10\",\r\n    \"description\": \"something\",\r\n    \"robisepTypeId\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								},
								{
									"name": "RobisepTypeID with only spaces/tabs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 404\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(404);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nickname\": \"robisep10\",\r\n    \"serialNumber\": \"123456\",\r\n    \"code\": \"picker10\",\r\n    \"description\": \"something\",\r\n    \"robisepTypeId\": \"               \",\r\n    \"roomId\": \"thisIsRoom\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "List Robisep - With values",
					"item": [
						{
							"name": "Success",
							"item": [
								{
									"name": "List All Robiseps",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps"
											]
										}
									},
									"response": []
								},
								{
									"name": "List All Robiseps with or TaskType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps/filter?taskType=SURVEILLANCE",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps",
												"filter"
											],
											"query": [
												{
													"key": "taskType",
													"value": "SURVEILLANCE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "List All Robiseps with or Nickname",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps/filter?nickname=robisep1",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps",
												"filter"
											],
											"query": [
												{
													"key": "nickname",
													"value": "robisep1"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Failure",
							"item": [
								{
									"name": "With Nickname and Tasktype",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps/filter?nickname=robisep1&taskType=SURVEILLANCE",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps",
												"filter"
											],
											"query": [
												{
													"key": "nickname",
													"value": "robisep1"
												},
												{
													"key": "taskType",
													"value": "SURVEILLANCE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "With Null Nickname and Null Tasktype",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps/filter?",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps",
												"filter"
											],
											"query": [
												{
													"key": "",
													"value": null
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid TaskType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robiseps/filter?taskType=INVALID",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"{{FLEET_API}}",
												"robiseps",
												"filter"
											],
											"query": [
												{
													"key": "taskType",
													"value": "INVALID"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Path",
			"item": [
				{
					"name": "Bootstrap",
					"item": [
						{
							"name": "Create Building For Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"domainId\": \"buildingPathId\",\r\n    \"buildingName\": \"Building for Path\",\r\n    \"buildingDimensions\": {\r\n        \"width\": 7,\r\n        \"length\": 8\r\n    },\r\n    \"buildingDescription\": \"For Path Test Purposes \",\r\n    \"buildingCode\": \"BPI\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/api/campus/buildings",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"campus",
										"buildings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Floor For Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"domainId\": \"floorPathId\",\r\n    \"buildingId\": \"buildingPathId\",\r\n    \"floorDescription\": \"Path Test Purposes\",\r\n    \"floorNumber\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/api/campus/floors",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"campus",
										"floors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Room 1 For Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"domainId\": \"roomPathId1\", \r\n    \"name\": \"Room 1 Test Path\",\r\n    \"description\": \"Path Test Purposes\",\r\n    \"category\": \"LABORATORY\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 0,\r\n            \"yPosition\": 1\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 2,\r\n            \"yPosition\": 2\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 2,\r\n        \"yPosition\": 1\r\n    },\r\n    \"doorOrientation\": \"EAST\",\r\n    \"floorId\": \"floorPathId\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/api/campus/rooms",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"campus",
										"rooms"
									]
								}
							},
							"response": []
						},
						{
							"name": "Room 2 For Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"domainId\": \"roomPathId2\", \r\n    \"name\": \"Room 2 Test Path\",\r\n    \"description\": \"Path Test Purposes\",\r\n    \"category\": \"LABORATORY\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 5,\r\n            \"yPosition\": 0\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 6,\r\n            \"yPosition\": 2\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 5,\r\n        \"yPosition\": 1\r\n    },\r\n    \"doorOrientation\": \"WEST\",\r\n    \"floorId\": \"floorPathId\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/api/campus/rooms",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"campus",
										"rooms"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "apikey",
						"apikey": [
							{
								"key": "value",
								"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImFKOGJkVF81N2JuR1pTZEI0djRPSCJ9.eyJpc3MiOiJodHRwczovL2Rldi01MWpsbWF4NW0xc2VicHBxLmV1LmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw2NTg4NWI0ZWI3ZmM1ZTc2ODI5ZDIxMTIiLCJhdWQiOlsiaHR0cHM6Ly9hcGkuYXV0aC5yb2Jkcm9uZWdvLmNvbSIsImh0dHBzOi8vZGV2LTUxamxtYXg1bTFzZWJwcHEuZXUuYXV0aDAuY29tL3VzZXJpbmZvIl0sImlhdCI6MTcwMzc4MTUwOSwiZXhwIjoxNzA2MzczNTA5LCJhenAiOiJxc0FLcjNIdmVueTFYTXV0c1N0ejV6ckViUWdNWDBxcSIsInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwiLCJwZXJtaXNzaW9ucyI6WyJtYW5hZ2U6Y2FtcHVzIl19.Has67f77jK8AsF1s5_rH7_MdC1xyaNdZzsWT-HYdKftf7hlP2kinnLIkaXcLtmkHH1jk7FVhpKufkXdIGooK3qp9RlWj5KRbKC2DXpdvf6UpAe-eikQfKFYP0-JwaothvYoTeqakjdtHL0TuXR8dmkD-MemCTQ-CSCkOScJuEMWZdwsIrbJVHzZwifmuYTQwpJXi6KRgub69fCI36WbeA-J9DjVlz1Q7W4gtu8ZyvHDQBvzy1Qb7FFVqM0yH5SjpmastRQHROGfpCLqZztvthWQoDTlJRRV7-6KDchp3TLROo3PCJobL_NZltG3UBazcFF8Awml98gJM75BBsHypqw",
								"type": "string"
							},
							{
								"key": "key",
								"value": "Authorization",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "List",
					"item": [
						{
							"name": "GETPathBetweenBuildings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/tasks/path?originFloorId=floorPathId&originRoomId=roomPathId1&destinationFloorId=floorPathId&destinationRoomId=roomPathId2",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"{{PREFIX}}",
										"tasks",
										"path"
									],
									"query": [
										{
											"key": "originFloorId",
											"value": "floorPathId"
										},
										{
											"key": "originRoomId",
											"value": "roomPathId1"
										},
										{
											"key": "destinationFloorId",
											"value": "floorPathId"
										},
										{
											"key": "destinationRoomId",
											"value": "roomPathId2"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Prolog",
			"item": [
				{
					"name": "getCampusFacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/prolog/campus",
							"host": [
								"{{URL}}"
							],
							"port": "{{PORT}}",
							"path": [
								"{{PREFIX}}",
								"prolog",
								"campus"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Task",
			"item": [
				{
					"name": "Bootsrap",
					"item": [
						{
							"name": "building 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"domainId\": \"buildingSurveillanceTask1\",\r\n    \"buildingName\": \"Building Surveillance\",\r\n    \"buildingDimensions\": {\r\n        \"width\": 10,\r\n        \"length\": 10\r\n    },\r\n    \"buildingDescription\": \"Building Surveillance\",\r\n    \"buildingCode\": \"BS1\"\r\n}"
								},
								"url": {
									"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"{{PREFIX}}",
										"{{CAMPUS_API}}",
										"buildings"
									]
								}
							},
							"response": []
						},
						{
							"name": "building 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"domainId\": \"buildingSurveillanceTask2\",\r\n    \"buildingName\": \"Building Surveillance\",\r\n    \"buildingDimensions\": {\r\n        \"width\": 10,\r\n        \"length\": 10\r\n    },\r\n    \"buildingDescription\": \"Building Surveillance\",\r\n    \"buildingCode\": \"BS2\"\r\n}"
								},
								"url": {
									"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/buildings",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"{{PREFIX}}",
										"{{CAMPUS_API}}",
										"buildings"
									]
								}
							},
							"response": []
						},
						{
							"name": "floor 1 - building 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"domainId\": \"floorTask1\",\r\n    \"buildingId\" : \"buildingSurveillanceTask1\",\r\n    \"floorNumber\" : 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"{{PREFIX}}",
										"{{CAMPUS_API}}",
										"floors"
									]
								}
							},
							"response": []
						},
						{
							"name": "floor 2 - building 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"domainId\": \"floorTask2\",\r\n    \"buildingId\" : \"buildingSurveillanceTask1\",\r\n    \"floorNumber\" : 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"{{PREFIX}}",
										"{{CAMPUS_API}}",
										"floors"
									]
								}
							},
							"response": []
						},
						{
							"name": "floor 1 - building 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"domainId\": \"floorTask3\",\r\n    \"buildingId\" : \"buildingSurveillanceTask2\",\r\n    \"floorNumber\" : 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/floors",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"{{PREFIX}}",
										"{{CAMPUS_API}}",
										"floors"
									]
								}
							},
							"response": []
						},
						{
							"name": "robisepType 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImFKOGJkVF81N2JuR1pTZEI0djRPSCJ9.eyJpc3MiOiJodHRwczovL2Rldi01MWpsbWF4NW0xc2VicHBxLmV1LmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw2NTg4NWI3NzA4OTBjODcwMzg4OWVkY2IiLCJhdWQiOlsiaHR0cHM6Ly9hcGkuYXV0aC5yb2Jkcm9uZWdvLmNvbSIsImh0dHBzOi8vZGV2LTUxamxtYXg1bTFzZWJwcHEuZXUuYXV0aDAuY29tL3VzZXJpbmZvIl0sImlhdCI6MTcwMzc4MTUyOSwiZXhwIjoxNzA2MzczNTI5LCJhenAiOiJxc0FLcjNIdmVueTFYTXV0c1N0ejV6ckViUWdNWDBxcSIsInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwiLCJwZXJtaXNzaW9ucyI6WyJtYW5hZ2U6ZmxlZXQiXX0.xTTi4C7PMnUfmvmqeADV-m73e8pavC3kJ0JQBfz1DTBw0D5pnOKH8qc1dzu9trBgePnLtmbFANrhfa2smVOSC73wqovoRI5EopJcLCmtEOih4JldfZAmNt6eGkaXRBe5nTH6z1BcF14Ub5_XK8LdMG-Txe5B0qIvkpZ-n0_Sk-1-ZDGhmCsrTtiO9bDiiU5TlDR0tGWgVtyGJ6HfuAoRinPxTwci1eXhbsUq-1uXyRGXDognBf3r9K0r6nyGet6LNfAlC_uQiwIeSOwvR2g8dnsORxTR9Sa7-Fz_PwmotXznqerGW_FrQPyt2k-q5EJ72e566okCz9Xj1ARatzNISg",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"domainId\": \"robisepTypeTask1\",\r\n    \"designation\": \"robisepTypeTask\",\r\n    \"brand\": \"brandTask\",\r\n    \"model\": \"modelTask\",\r\n    \"tasksType\": [\r\n        \"Transport \",\r\n        \"Surveillance\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{FLEET_API}}/robisepsType",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"{{PREFIX}}",
										"{{FLEET_API}}",
										"robisepsType"
									]
								}
							},
							"response": []
						},
						{
							"name": "room 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"domainId\": \"roomTask1\",\r\n    \"name\": \"roomTask1\",\r\n    \"description\": \"task1\",\r\n    \"category\": \"LABORATORY\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 4,\r\n            \"yPosition\": 4\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 6,\r\n            \"yPosition\": 6\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 5,\r\n        \"yPosition\": 6\r\n    },\r\n    \"doorOrientation\": \"SOUTH\",\r\n    \"floorId\": \"floorTask1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"{{PREFIX}}",
										"{{CAMPUS_API}}",
										"rooms"
									]
								}
							},
							"response": []
						},
						{
							"name": "room 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"domainId\": \"roomTask2\",\r\n    \"name\": \"roomTask2\",\r\n    \"description\": \"task2\",\r\n    \"category\": \"LABORATORY\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 4,\r\n            \"yPosition\": 4\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 6,\r\n            \"yPosition\": 6\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 5,\r\n        \"yPosition\": 6\r\n    },\r\n    \"doorOrientation\": \"SOUTH\",\r\n    \"floorId\": \"floorTask2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"{{PREFIX}}",
										"{{CAMPUS_API}}",
										"rooms"
									]
								}
							},
							"response": []
						},
						{
							"name": "room 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"domainId\": \"roomTask3\",\r\n    \"name\": \"roomTask3\",\r\n    \"description\": \"task3\",\r\n    \"category\": \"LABORATORY\",\r\n    \"dimensions\": {\r\n        \"initialPosition\": {\r\n            \"xPosition\": 8,\r\n            \"yPosition\": 8\r\n        },\r\n        \"finalPosition\": {\r\n            \"xPosition\": 9,\r\n            \"yPosition\": 9\r\n        }\r\n    },\r\n    \"doorPosition\": {\r\n        \"xPosition\": 8,\r\n        \"yPosition\": 8\r\n    },\r\n    \"doorOrientation\": \"NORTH\",\r\n    \"floorId\": \"floorTask2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/{{CAMPUS_API}}/rooms",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"{{PREFIX}}",
										"{{CAMPUS_API}}",
										"rooms"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "apikey",
						"apikey": [
							{
								"key": "value",
								"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImFKOGJkVF81N2JuR1pTZEI0djRPSCJ9.eyJpc3MiOiJodHRwczovL2Rldi01MWpsbWF4NW0xc2VicHBxLmV1LmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw2NTg4NWI0ZWI3ZmM1ZTc2ODI5ZDIxMTIiLCJhdWQiOlsiaHR0cHM6Ly9hcGkuYXV0aC5yb2Jkcm9uZWdvLmNvbSIsImh0dHBzOi8vZGV2LTUxamxtYXg1bTFzZWJwcHEuZXUuYXV0aDAuY29tL3VzZXJpbmZvIl0sImlhdCI6MTcwMzc4MTUwOSwiZXhwIjoxNzA2MzczNTA5LCJhenAiOiJxc0FLcjNIdmVueTFYTXV0c1N0ejV6ckViUWdNWDBxcSIsInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwiLCJwZXJtaXNzaW9ucyI6WyJtYW5hZ2U6Y2FtcHVzIl19.Has67f77jK8AsF1s5_rH7_MdC1xyaNdZzsWT-HYdKftf7hlP2kinnLIkaXcLtmkHH1jk7FVhpKufkXdIGooK3qp9RlWj5KRbKC2DXpdvf6UpAe-eikQfKFYP0-JwaothvYoTeqakjdtHL0TuXR8dmkD-MemCTQ-CSCkOScJuEMWZdwsIrbJVHzZwifmuYTQwpJXi6KRgub69fCI36WbeA-J9DjVlz1Q7W4gtu8ZyvHDQBvzy1Qb7FFVqM0yH5SjpmastRQHROGfpCLqZztvthWQoDTlJRRV7-6KDchp3TLROo3PCJobL_NZltG3UBazcFF8Awml98gJM75BBsHypqw",
								"type": "string"
							},
							{
								"key": "key",
								"value": "Authorization",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Create",
					"item": [
						{
							"name": "Valid",
							"item": [
								{
									"name": "SurveillanceTask",
									"item": [
										{
											"name": "Surveillance Task",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"robisepType\": \"robisepTypeTask1\",\r\n    \"iamId\": \"auth0|65885b770890c8703889edcb\",\r\n    \"surveillanceTask\": {\r\n        \"emergencyPhoneNumber\": \"912345678\",\r\n        \"startingPointToWatch\": \"roomTask2\",\r\n        \"endingPointToWatch\": \"roomTask3\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://localhost:4000/api/tasks/tasks",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "4000",
													"path": [
														"api",
														"tasks",
														"tasks"
													],
													"query": [
														{
															"key": null,
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Pickup&DeliveryTask",
									"item": [
										{
											"name": "Pickup & Delivery Task",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"robisepType\": \"robisepTypeTask1\",\r\n    \"iamId\": \"auth0|65885b770890c8703889edcb\",\r\n    \"pickUpAndDeliveryTask\": {\r\n        \"pickUpPersonContact\": {\r\n            \"name\": \"John Doe\",\r\n            \"phoneNumber\": \"912345678\"\r\n        },\r\n        \"deliveryPersonContact\": {\r\n            \"name\": \"Jane Doe\",\r\n            \"phoneNumber\": \"912543876\"\r\n        },\r\n        \"description\": \"Take the board pen to roomTask2 -> Jane Doe - 912543876\",\r\n        \"confirmationCode\": 321123,\r\n        \"pickUpRoom\": \"roomTask1\",\r\n        \"deliveryRoom\": \"roomTask2\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://localhost:4000/api/tasks/tasks",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "4000",
													"path": [
														"api",
														"tasks",
														"tasks"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Invalid",
							"item": [
								{
									"name": "SurveillanceTask",
									"item": [
										{
											"name": "Emergency Phone Number Is Not Valid Format",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"robisepType\": \"robisepTypeTask1\",\r\n    \"surveillanceTask\": {\r\n        \"emergencyPhoneNumber\": \"+34710448521\",\r\n        \"buildingToWatch\": \"buildingSurveillanceTask1\",\r\n        \"floorsToWatch\": [\r\n            \"floorTask1\"\r\n        ]\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://localhost:4000/api/tasks/tasks",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "4000",
													"path": [
														"api",
														"tasks",
														"tasks"
													]
												}
											},
											"response": []
										},
										{
											"name": "RobisepType Not Found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"robisepType\": \"Invalid\",\r\n    \"surveillanceTask\": {\r\n        \"emergencyPhoneNumber\": \"+912345678\",\r\n        \"buildingToWatch\": \"buildingSurveillanceTask1\",\r\n        \"floorsToWatch\": [\r\n            \"floorTask1\"\r\n        ]\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://localhost:4000/api/tasks/tasks",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "4000",
													"path": [
														"api",
														"tasks",
														"tasks"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Pickup&DeliveryTask",
									"item": [
										{
											"name": "Duplicate Room",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"robisepType\": \"robisepTypeTask1\",\r\n    \"iamId\": \"auth0|65885b770890c8703889edcb\",\r\n    \"pickUpAndDeliveryTask\": {\r\n        \"pickUpPersonContact\": {\r\n            \"name\": \"John Doe\",\r\n            \"phoneNumber\": \"912345678\"\r\n        },\r\n        \"deliveryPersonContact\": {\r\n            \"name\": \"Jane Doe\",\r\n            \"phoneNumber\": \"912543876\"\r\n        },\r\n        \"description\": \"Take the board pen to roomTask2 -> Jane Doe - 912543876\",\r\n        \"confirmationCode\": 321123,\r\n        \"pickUpRoom\": \"roomTask1\",\r\n        \"deliveryRoom\": \"roomTask1\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://localhost:4000/api/tasks/tasks",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "4000",
													"path": [
														"api",
														"tasks",
														"tasks"
													]
												}
											},
											"response": []
										},
										{
											"name": "Description Only Whitespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"robisepType\": \"robisepTypeTask1\",\r\n    \"iamId\": \"auth0|65885b770890c8703889edcb\",\r\n    \"pickUpAndDeliveryTask\": {\r\n        \"pickUpPersonContact\": {\r\n            \"name\": \"John Doe\",\r\n            \"phoneNumber\": \"912345678\"\r\n        },\r\n        \"deliveryPersonContact\": {\r\n            \"name\": \"Jane Doe\",\r\n            \"phoneNumber\": \"912543876\"\r\n        },\r\n        \"description\": \"        \",\r\n        \"confirmationCode\": 321123,\r\n        \"pickUpRoom\": \"roomTask1\",\r\n        \"deliveryRoom\": \"roomTask2\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://localhost:4000/api/tasks/tasks",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "4000",
													"path": [
														"api",
														"tasks",
														"tasks"
													]
												}
											},
											"response": []
										},
										{
											"name": "Description Too Short",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"robisepType\": \"robisepTypeTask1\",\r\n    \"iamId\": \"auth0|65885b770890c8703889edcb\",\r\n    \"pickUpAndDeliveryTask\": {\r\n        \"pickUpPersonContact\": {\r\n            \"name\": \"John Doe\",\r\n            \"phoneNumber\": \"912345678\"\r\n        },\r\n        \"deliveryPersonContact\": {\r\n            \"name\": \"Jane Doe\",\r\n            \"phoneNumber\": \"912543876\"\r\n        },\r\n        \"description\": \"\",\r\n        \"confirmationCode\": 321123,\r\n        \"pickUpRoom\": \"roomTask1\",\r\n        \"deliveryRoom\": \"roomTask2\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://localhost:4000/api/tasks/tasks",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "4000",
													"path": [
														"api",
														"tasks",
														"tasks"
													]
												}
											},
											"response": []
										},
										{
											"name": "Description Too Long",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"robisepType\": \"robisepTypeTask1\",\r\n    \"iamId\": \"auth0|65885b770890c8703889edcb\",\r\n    \"pickUpAndDeliveryTask\": {\r\n        \"pickUpPersonContact\": {\r\n            \"name\": \"John Doe\",\r\n            \"phoneNumber\": \"912345678\"\r\n        },\r\n        \"deliveryPersonContact\": {\r\n            \"name\": \"Jane Doe\",\r\n            \"phoneNumber\": \"912543876\"\r\n        },\r\n        \"description\": \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\r\n        \"confirmationCode\": 321123,\r\n        \"pickUpRoom\": \"roomTask1\",\r\n        \"deliveryRoom\": \"roomTask2\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://localhost:4000/api/tasks/tasks",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "4000",
													"path": [
														"api",
														"tasks",
														"tasks"
													]
												}
											},
											"response": []
										},
										{
											"name": "Confirmation Code Too Short",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"robisepType\": \"robisepTypeTask1\",\r\n    \"iamId\": \"auth0|65885b770890c8703889edcb\",\r\n    \"pickUpAndDeliveryTask\": {\r\n        \"pickUpPersonContact\": {\r\n            \"name\": \"John Doe\",\r\n            \"phoneNumber\": \"912345678\"\r\n        },\r\n        \"deliveryPersonContact\": {\r\n            \"name\": \"Jane Doe\",\r\n            \"phoneNumber\": \"912543876\"\r\n        },\r\n        \"description\": \"Take the board pen to roomTask2 -> Jane Doe - 912543876\",\r\n        \"confirmationCode\": 321,\r\n        \"pickUpRoom\": \"roomTask1\",\r\n        \"deliveryRoom\": \"roomTask2\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://localhost:4000/api/tasks/tasks",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "4000",
													"path": [
														"api",
														"tasks",
														"tasks"
													]
												}
											},
											"response": []
										},
										{
											"name": "Confirmation Code Too Short Long",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"robisepType\": \"robisepTypeTask1\",\r\n    \"iamId\": \"auth0|65885b770890c8703889edcb\",\r\n    \"pickUpAndDeliveryTask\": {\r\n        \"pickUpPersonContact\": {\r\n            \"name\": \"John Doe\",\r\n            \"phoneNumber\": \"912345678\"\r\n        },\r\n        \"deliveryPersonContact\": {\r\n            \"name\": \"Jane Doe\",\r\n            \"phoneNumber\": \"912543876\"\r\n        },\r\n        \"description\": \"Take the board pen to roomTask2 -> Jane Doe - 912543876\",\r\n        \"confirmationCode\": 321123321,\r\n        \"pickUpRoom\": \"roomTask1\",\r\n        \"deliveryRoom\": \"roomTask2\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://localhost:4000/api/tasks/tasks",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "4000",
													"path": [
														"api",
														"tasks",
														"tasks"
													]
												}
											},
											"response": []
										},
										{
											"name": "Room Not Found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"robisepType\": \"robisepTypeTask1\",\r\n    \"iamId\": \"auth0|65885b770890c8703889edcb\",\r\n    \"pickUpAndDeliveryTask\": {\r\n        \"pickUpPersonContact\": {\r\n            \"name\": \"John Doe\",\r\n            \"phoneNumber\": \"912345678\"\r\n        },\r\n        \"deliveryPersonContact\": {\r\n            \"name\": \"Jane Doe\",\r\n            \"phoneNumber\": \"912543876\"\r\n        },\r\n        \"description\": \"Take the board pen to roomTask2 -> Jane Doe - 912543876\",\r\n        \"confirmationCode\": 12332,\r\n        \"pickUpRoom\": \"InvalidNotFound\",\r\n        \"deliveryRoom\": \"roomTask2\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://localhost:4000/api/tasks/tasks",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "4000",
													"path": [
														"api",
														"tasks",
														"tasks"
													]
												}
											},
											"response": []
										},
										{
											"name": "RobisepType Not Found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"robisepType\": \"InvalidNotFound\",\r\n    \"iamId\": \"auth0|65885b770890c8703889edcb\",\r\n    \"pickUpAndDeliveryTask\": {\r\n        \"pickUpPersonContact\": {\r\n            \"name\": \"John Doe\",\r\n            \"phoneNumber\": \"912345678\"\r\n        },\r\n        \"deliveryPersonContact\": {\r\n            \"name\": \"Jane Doe\",\r\n            \"phoneNumber\": \"912543876\"\r\n        },\r\n        \"description\": \"Take the board pen to roomTask2 -> Jane Doe - 912543876\",\r\n        \"confirmationCode\": 321123,\r\n        \"pickUpRoom\": \"roomTask1\",\r\n        \"deliveryRoom\": \"roomTask2\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://localhost:4000/api/tasks/tasks",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "4000",
													"path": [
														"api",
														"tasks",
														"tasks"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid Pickup Person Name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"robisepType\": \"robisepTypeTask1\",\r\n    \"iamId\": \"auth0|65885b770890c8703889edcb\",\r\n    \"pickUpAndDeliveryTask\": {\r\n        \"pickUpPersonContact\": {\r\n            \"name\": \"   \",\r\n            \"phoneNumber\": \"912345678\"\r\n        },\r\n        \"deliveryPersonContact\": {\r\n            \"name\": \"Jane Doe\",\r\n            \"phoneNumber\": \"912543876\"\r\n        },\r\n        \"description\": \"Take the board pen to roomTask2 -> Jane Doe - 912543876\",\r\n        \"confirmationCode\": 321123,\r\n        \"pickUpRoom\": \"roomTask1\",\r\n        \"deliveryRoom\": \"roomTask2\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://localhost:4000/api/tasks/tasks",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "4000",
													"path": [
														"api",
														"tasks",
														"tasks"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid Delivery Person Name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"robisepType\": \"robisepTypeTask1\",\r\n    \"iamId\": \"auth0|65885b770890c8703889edcb\",\r\n    \"pickUpAndDeliveryTask\": {\r\n        \"pickUpPersonContact\": {\r\n            \"name\": \"John Doe\",\r\n            \"phoneNumber\": \"912345678\"\r\n        },\r\n        \"deliveryPersonContact\": {\r\n            \"name\": \"   \",\r\n            \"phoneNumber\": \"912543876\"\r\n        },\r\n        \"description\": \"Take the board pen to roomTask2 -> Jane Doe - 912543876\",\r\n        \"confirmationCode\": 321123,\r\n        \"pickUpRoom\": \"roomTask1\",\r\n        \"deliveryRoom\": \"roomTask2\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://localhost:4000/api/tasks/tasks",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "4000",
													"path": [
														"api",
														"tasks",
														"tasks"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid Pickup Person Phone Number",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"robisepType\": \"robisepTypeTask1\",\r\n    \"iamId\": \"auth0|65885b770890c8703889edcb\",\r\n    \"pickUpAndDeliveryTask\": {\r\n        \"pickUpPersonContact\": {\r\n            \"name\": \"John Doe\",\r\n            \"phoneNumber\": \"  \"\r\n        },\r\n        \"deliveryPersonContact\": {\r\n            \"name\": \"Jane Doe\",\r\n            \"phoneNumber\": \"912543876\"\r\n        },\r\n        \"description\": \"Take the board pen to roomTask2 -> Jane Doe - 912543876\",\r\n        \"confirmationCode\": 321123,\r\n        \"pickUpRoom\": \"roomTask1\",\r\n        \"deliveryRoom\": \"roomTask2\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://localhost:4000/api/tasks/tasks",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "4000",
													"path": [
														"api",
														"tasks",
														"tasks"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid Delivery Person Phone Number",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"robisepType\": \"robisepTypeTask1\",\r\n    \"iamId\": \"auth0|65885b770890c8703889edcb\",\r\n    \"pickUpAndDeliveryTask\": {\r\n        \"pickUpPersonContact\": {\r\n            \"name\": \"John Doe\",\r\n            \"phoneNumber\": \"912345678\"\r\n        },\r\n        \"deliveryPersonContact\": {\r\n            \"name\": \"Jane Doe\",\r\n            \"phoneNumber\": \"   \"\r\n        },\r\n        \"description\": \"Take the board pen to roomTask2 -> Jane Doe - 912543876\",\r\n        \"confirmationCode\": 321123,\r\n        \"pickUpRoom\": \"roomTask1\",\r\n        \"deliveryRoom\": \"roomTask2\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://localhost:4000/api/tasks/tasks",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "4000",
													"path": [
														"api",
														"tasks",
														"tasks"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "List All",
					"item": [
						{
							"name": "All Tasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:4000/api/tasks/tasks",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"tasks",
										"tasks"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "List By State",
					"item": [
						{
							"name": "All Tasks By State",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImFKOGJkVF81N2JuR1pTZEI0djRPSCJ9.eyJpc3MiOiJodHRwczovL2Rldi01MWpsbWF4NW0xc2VicHBxLmV1LmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw2NTg4NWI2ODA4OTBjODcwMzg4OWVkYzQiLCJhdWQiOlsiaHR0cHM6Ly9hcGkuYXV0aC5yb2Jkcm9uZWdvLmNvbSIsImh0dHBzOi8vZGV2LTUxamxtYXg1bTFzZWJwcHEuZXUuYXV0aDAuY29tL3VzZXJpbmZvIl0sImlhdCI6MTcwMzY2ODU0OCwiZXhwIjoxNzAzNzU0OTQ4LCJhenAiOiJxc0FLcjNIdmVueTFYTXV0c1N0ejV6ckViUWdNWDBxcSIsInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwiLCJwZXJtaXNzaW9ucyI6WyJtYW5hZ2U6dGFza3MiXX0.utafdSvoTvVGtesxt9JbAE_Slz8uLm_HL-VTnNi9S1VStgWrZr0diZR8QCsKWBk6m1De7vQ4bSMt7lBHuqU982BHlfpyZ0aHIR0LlPG5kMiD4ECpfpRuCac94QvXVsoV1u2vfyGqhXdkSZ48WFkfRGDhlaURpPCnlGxysOaq_16B9sg-uAlGXJdt_DU6P2hS1z4oD6lvkTiGknqMZybK74g_EKXtmmqgOGwCr87HaM3nb3CUgIEq-zc1_zZQsj4UbaLajFko4ZTt_DNV668lArFZyt5vSoWBiCzHT5rt_2aDIGQ5x6r0YE-DlcFkSUGDSorzk-LDdpnD5f2SsR0v1w",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:4000/api/tasks/tasks/state?state=ACCEPTED",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"tasks",
										"tasks",
										"state"
									],
									"query": [
										{
											"key": "state",
											"value": "ACCEPTED"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "List By State or Type or User",
					"item": [
						{
							"name": "All Tasks by State or Type or User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImFKOGJkVF81N2JuR1pTZEI0djRPSCJ9.eyJpc3MiOiJodHRwczovL2Rldi01MWpsbWF4NW0xc2VicHBxLmV1LmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw2NTg4NWI2ODA4OTBjODcwMzg4OWVkYzQiLCJhdWQiOlsiaHR0cHM6Ly9hcGkuYXV0aC5yb2Jkcm9uZWdvLmNvbSIsImh0dHBzOi8vZGV2LTUxamxtYXg1bTFzZWJwcHEuZXUuYXV0aDAuY29tL3VzZXJpbmZvIl0sImlhdCI6MTcwMzY2ODU0OCwiZXhwIjoxNzAzNzU0OTQ4LCJhenAiOiJxc0FLcjNIdmVueTFYTXV0c1N0ejV6ckViUWdNWDBxcSIsInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwiLCJwZXJtaXNzaW9ucyI6WyJtYW5hZ2U6dGFza3MiXX0.utafdSvoTvVGtesxt9JbAE_Slz8uLm_HL-VTnNi9S1VStgWrZr0diZR8QCsKWBk6m1De7vQ4bSMt7lBHuqU982BHlfpyZ0aHIR0LlPG5kMiD4ECpfpRuCac94QvXVsoV1u2vfyGqhXdkSZ48WFkfRGDhlaURpPCnlGxysOaq_16B9sg-uAlGXJdt_DU6P2hS1z4oD6lvkTiGknqMZybK74g_EKXtmmqgOGwCr87HaM3nb3CUgIEq-zc1_zZQsj4UbaLajFko4ZTt_DNV668lArFZyt5vSoWBiCzHT5rt_2aDIGQ5x6r0YE-DlcFkSUGDSorzk-LDdpnD5f2SsR0v1w",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:4000/api/tasks/tasks?personId=auth0|658dbe25b7fc5e76829ee913&state=REQUESTED&robisepType=obef81d784774f50a70839411fbd6bd4",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"tasks",
										"tasks"
									],
									"query": [
										{
											"key": "personId",
											"value": "auth0|658dbe25b7fc5e76829ee913"
										},
										{
											"key": "state",
											"value": "REQUESTED"
										},
										{
											"key": "robisepType",
											"value": "obef81d784774f50a70839411fbd6bd4"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update State",
					"item": [
						{
							"name": "Valid",
							"item": [
								{
									"name": "Accept Task Requisition",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Create the request body\r",
													"const requestBody = {\r",
													"    robisepType: 'robisepTypeTask1',\r",
													"    iamId: 'auth0|65885b770890c8703889edcb',\r",
													"    surveillanceTask: {\r",
													"        emergencyPhoneNumber: \"912345678\",\r",
													"        startingPointToWatch: \"roomTask2\",\r",
													"        endingPointToWatch: \"roomTask3\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest({\r",
													"  url: 'http://localhost:4000/api/tasks/tasks',\r",
													"  method: 'POST',\r",
													"  header: {\r",
													"    'Content-Type': 'application/json',\r",
													"    'Authorization': 'Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImFKOGJkVF81N2JuR1pTZEI0djRPSCJ9.eyJpc3MiOiJodHRwczovL2Rldi01MWpsbWF4NW0xc2VicHBxLmV1LmF1dGgwLmNvbS8iLCJzdWIiOiJnb29nbGUtb2F1dGgyfDEwOTIxNDgzODIwMjMyMjM5NTc5NSIsImF1ZCI6WyJodHRwczovL2FwaS5hdXRoLnJvYmRyb25lZ28uY29tIiwiaHR0cHM6Ly9kZXYtNTFqbG1heDVtMXNlYnBwcS5ldS5hdXRoMC5jb20vdXNlcmluZm8iXSwiaWF0IjoxNzAzOTc1NjA5LCJleHAiOjE3MDY1Njc2MDksImF6cCI6InFzQUtyM0h2ZW55MVhNdXRzU3R6NXpyRWJRZ01YMHFxIiwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCIsInBlcm1pc3Npb25zIjpbImNyZWF0ZTp0YXNrcmVxdWlzaXRpb24iLCJtYW5hZ2U6YWRtaW4iLCJtYW5hZ2U6Y2FtcHVzIiwibWFuYWdlOmZsZWV0IiwibWFuYWdlOnRhc2tzIiwibWFuYWdlOnVzZXJzIiwidXNlcjpyZXF1ZXN0cyJdfQ.I7cXgypF9j_SQ6DcG6W6JKoi1ZoPcu5jAg5jhIeCOkTPLzggOfzt3i6BGzdlUGGcM3GY7J8eNG74B7Q6N-TsF7m4wugYVX2Iqpo2Cebnt6qkHU1lqeTiLeLFd5gmLBKgCYdhvDSErywFqloXNXHDMEm2Bn8_vFjeTeokOwTgtblYVd1As15e--b7TPmCrL107hEvRWIp2VpYYH2LgTb2chVxo20bJSZZwh_b3gQPe9Zsp2uj7ZPkN8opoA44r6Repap_NveJkXquV2ADwxjCaEifqTwDOE0_1kefgqGVOw_DJFVQCjVz0Mo3mLF6uyfyIgbsC0RQZ4v5Swg-xAjRBQ'\r",
													"  },\r",
													"    body: {\r",
													"    mode: 'raw',\r",
													"    raw: JSON.stringify(requestBody),\r",
													"  },\r",
													"}, (error, response) => {\r",
													"// Log response\r",
													"  console.log(response);\r",
													"\r",
													"  // Check for errors\r",
													"  if (error) {\r",
													"    console.error(error);\r",
													"    return;\r",
													"  }\r",
													"\r",
													"  // Parse the response JSON\r",
													"  const responseBody = response.json();\r",
													"\r",
													"  // Extract the taskCode\r",
													"  const taskCode = responseBody.taskCode;\r",
													"\r",
													"  pm.collectionVariables.set('taskCodeForPatch', taskCode);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"robisepCode\": \"picker2\",\r\n    \"newTaskState\": \"ACCEPTED\",\r\n    \"taskType\": \"SURVEILLANCE\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/tasks/tasks/{{taskCodeForPatch}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"tasks",
												"tasks",
												"{{taskCodeForPatch}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Reject Task Requisition",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Create the request body\r",
													"const requestBody = {\r",
													"    robisepType: 'robisepTypeTask1',\r",
													"    iamId: 'auth0|65885b770890c8703889edcb',\r",
													"    surveillanceTask: {\r",
													"        emergencyPhoneNumber: \"912345678\",\r",
													"        startingPointToWatch: \"roomTask2\",\r",
													"        endingPointToWatch: \"roomTask3\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest({\r",
													"  url: 'http://localhost:4000/api/tasks/tasks',\r",
													"  method: 'POST',\r",
													"  header: {\r",
													"    'Content-Type': 'application/json',\r",
													"    'Authorization': 'Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImFKOGJkVF81N2JuR1pTZEI0djRPSCJ9.eyJpc3MiOiJodHRwczovL2Rldi01MWpsbWF4NW0xc2VicHBxLmV1LmF1dGgwLmNvbS8iLCJzdWIiOiJnb29nbGUtb2F1dGgyfDEwOTIxNDgzODIwMjMyMjM5NTc5NSIsImF1ZCI6WyJodHRwczovL2FwaS5hdXRoLnJvYmRyb25lZ28uY29tIiwiaHR0cHM6Ly9kZXYtNTFqbG1heDVtMXNlYnBwcS5ldS5hdXRoMC5jb20vdXNlcmluZm8iXSwiaWF0IjoxNzAzOTc1NjA5LCJleHAiOjE3MDY1Njc2MDksImF6cCI6InFzQUtyM0h2ZW55MVhNdXRzU3R6NXpyRWJRZ01YMHFxIiwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCIsInBlcm1pc3Npb25zIjpbImNyZWF0ZTp0YXNrcmVxdWlzaXRpb24iLCJtYW5hZ2U6YWRtaW4iLCJtYW5hZ2U6Y2FtcHVzIiwibWFuYWdlOmZsZWV0IiwibWFuYWdlOnRhc2tzIiwibWFuYWdlOnVzZXJzIiwidXNlcjpyZXF1ZXN0cyJdfQ.I7cXgypF9j_SQ6DcG6W6JKoi1ZoPcu5jAg5jhIeCOkTPLzggOfzt3i6BGzdlUGGcM3GY7J8eNG74B7Q6N-TsF7m4wugYVX2Iqpo2Cebnt6qkHU1lqeTiLeLFd5gmLBKgCYdhvDSErywFqloXNXHDMEm2Bn8_vFjeTeokOwTgtblYVd1As15e--b7TPmCrL107hEvRWIp2VpYYH2LgTb2chVxo20bJSZZwh_b3gQPe9Zsp2uj7ZPkN8opoA44r6Repap_NveJkXquV2ADwxjCaEifqTwDOE0_1kefgqGVOw_DJFVQCjVz0Mo3mLF6uyfyIgbsC0RQZ4v5Swg-xAjRBQ'\r",
													"  },\r",
													"    body: {\r",
													"    mode: 'raw',\r",
													"    raw: JSON.stringify(requestBody),\r",
													"  },\r",
													"}, (error, response) => {\r",
													"// Log response\r",
													"  console.log(response);\r",
													"\r",
													"  // Check for errors\r",
													"  if (error) {\r",
													"    console.error(error);\r",
													"    return;\r",
													"  }\r",
													"\r",
													"  // Parse the response JSON\r",
													"  const responseBody = response.json();\r",
													"\r",
													"  // Extract the taskCode\r",
													"  const taskCode = responseBody.taskCode;\r",
													"\r",
													"  pm.collectionVariables.set('taskCodeForPatch', taskCode);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"robisepCode\": \"picker2\",\r\n    \"newTaskState\": \"REFUSED\",\r\n    \"taskType\": \"SURVEILLANCE\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/tasks/tasks/{{taskCodeForPatch}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"tasks",
												"tasks",
												"{{taskCodeForPatch}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invalid",
							"item": [
								{
									"name": "Accept Refused Task Requisition",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Create the request body\r",
													"const requestBody = {\r",
													"    robisepType: 'robisepTypeTask1',\r",
													"    iamId: 'auth0|65885b770890c8703889edcb',\r",
													"    surveillanceTask: {\r",
													"        emergencyPhoneNumber: \"912345678\",\r",
													"        startingPointToWatch: \"roomTask2\",\r",
													"        endingPointToWatch: \"roomTask3\"\r",
													"    }\r",
													"};\r",
													"\r",
													"// Function to create the task\r",
													"function createTask(callback) {\r",
													"    pm.sendRequest({\r",
													"        url: 'http://localhost:4000/api/tasks/tasks',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'Authorization': 'Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImFKOGJkVF81N2JuR1pTZEI0djRPSCJ9.eyJpc3MiOiJodHRwczovL2Rldi01MWpsbWF4NW0xc2VicHBxLmV1LmF1dGgwLmNvbS8iLCJzdWIiOiJnb29nbGUtb2F1dGgyfDEwOTIxNDgzODIwMjMyMjM5NTc5NSIsImF1ZCI6WyJodHRwczovL2FwaS5hdXRoLnJvYmRyb25lZ28uY29tIiwiaHR0cHM6Ly9kZXYtNTFqbG1heDVtMXNlYnBwcS5ldS5hdXRoMC5jb20vdXNlcmluZm8iXSwiaWF0IjoxNzAzOTc1NjA5LCJleHAiOjE3MDY1Njc2MDksImF6cCI6InFzQUtyM0h2ZW55MVhNdXRzU3R6NXpyRWJRZ01YMHFxIiwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCIsInBlcm1pc3Npb25zIjpbImNyZWF0ZTp0YXNrcmVxdWlzaXRpb24iLCJtYW5hZ2U6YWRtaW4iLCJtYW5hZ2U6Y2FtcHVzIiwibWFuYWdlOmZsZWV0IiwibWFuYWdlOnRhc2tzIiwibWFuYWdlOnVzZXJzIiwidXNlcjpyZXF1ZXN0cyJdfQ.I7cXgypF9j_SQ6DcG6W6JKoi1ZoPcu5jAg5jhIeCOkTPLzggOfzt3i6BGzdlUGGcM3GY7J8eNG74B7Q6N-TsF7m4wugYVX2Iqpo2Cebnt6qkHU1lqeTiLeLFd5gmLBKgCYdhvDSErywFqloXNXHDMEm2Bn8_vFjeTeokOwTgtblYVd1As15e--b7TPmCrL107hEvRWIp2VpYYH2LgTb2chVxo20bJSZZwh_b3gQPe9Zsp2uj7ZPkN8opoA44r6Repap_NveJkXquV2ADwxjCaEifqTwDOE0_1kefgqGVOw_DJFVQCjVz0Mo3mLF6uyfyIgbsC0RQZ4v5Swg-xAjRBQ'\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'raw',\r",
													"            raw: JSON.stringify(requestBody),\r",
													"        },\r",
													"    }, (error, response) => {\r",
													"        // Log response\r",
													"        console.log('Crei');\r",
													"\r",
													"        // Check for errors\r",
													"        if (error) {\r",
													"            console.error(error);\r",
													"            return;\r",
													"        }\r",
													"\r",
													"        // Parse the response JSON\r",
													"        const responseBody = response.json();\r",
													"\r",
													"        // Extract the taskCode\r",
													"        const taskCode = responseBody.taskCode;\r",
													"\r",
													"        pm.collectionVariables.set('taskCodeForPatch', taskCode);\r",
													"\r",
													"        // Call the callback function to indicate completion\r",
													"        callback();\r",
													"    });\r",
													"}\r",
													"\r",
													"// Function to refuse the task\r",
													"function acceptTask() {\r",
													"    // Prepare the request to accept the task\r",
													"    const acceptRequestBody = {\r",
													"        robisepCode: \"picker2\",\r",
													"        newTaskState: \"REFUSED\",\r",
													"        taskType: \"SURVEILLANCE\"\r",
													"    }\r",
													"\r",
													"    const requestUrl = 'http://localhost:4000/api/tasks/tasks/' + pm.collectionVariables.get('taskCodeForPatch');\r",
													"\r",
													"    pm.sendRequest({\r",
													"        url: requestUrl,\r",
													"        method: 'PATCH',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'Authorization': 'Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImFKOGJkVF81N2JuR1pTZEI0djRPSCJ9.eyJpc3MiOiJodHRwczovL2Rldi01MWpsbWF4NW0xc2VicHBxLmV1LmF1dGgwLmNvbS8iLCJzdWIiOiJnb29nbGUtb2F1dGgyfDEwOTIxNDgzODIwMjMyMjM5NTc5NSIsImF1ZCI6WyJodHRwczovL2FwaS5hdXRoLnJvYmRyb25lZ28uY29tIiwiaHR0cHM6Ly9kZXYtNTFqbG1heDVtMXNlYnBwcS5ldS5hdXRoMC5jb20vdXNlcmluZm8iXSwiaWF0IjoxNzAzOTc1NjA5LCJleHAiOjE3MDY1Njc2MDksImF6cCI6InFzQUtyM0h2ZW55MVhNdXRzU3R6NXpyRWJRZ01YMHFxIiwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCIsInBlcm1pc3Npb25zIjpbImNyZWF0ZTp0YXNrcmVxdWlzaXRpb24iLCJtYW5hZ2U6YWRtaW4iLCJtYW5hZ2U6Y2FtcHVzIiwibWFuYWdlOmZsZWV0IiwibWFuYWdlOnRhc2tzIiwibWFuYWdlOnVzZXJzIiwidXNlcjpyZXF1ZXN0cyJdfQ.I7cXgypF9j_SQ6DcG6W6JKoi1ZoPcu5jAg5jhIeCOkTPLzggOfzt3i6BGzdlUGGcM3GY7J8eNG74B7Q6N-TsF7m4wugYVX2Iqpo2Cebnt6qkHU1lqeTiLeLFd5gmLBKgCYdhvDSErywFqloXNXHDMEm2Bn8_vFjeTeokOwTgtblYVd1As15e--b7TPmCrL107hEvRWIp2VpYYH2LgTb2chVxo20bJSZZwh_b3gQPe9Zsp2uj7ZPkN8opoA44r6Repap_NveJkXquV2ADwxjCaEifqTwDOE0_1kefgqGVOw_DJFVQCjVz0Mo3mLF6uyfyIgbsC0RQZ4v5Swg-xAjRBQ'\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'raw',\r",
													"            raw: JSON.stringify(acceptRequestBody),\r",
													"        },\r",
													"    }, (error, response) => {\r",
													"        // Log response\r",
													"        console.log('aceitei');\r",
													"\r",
													"        // Check for errors\r",
													"        if (error) {\r",
													"            console.error(error);\r",
													"            return;\r",
													"        }\r",
													"    });\r",
													"}\r",
													"\r",
													"// Call createTask with acceptTask as a callback\r",
													"createTask(acceptTask);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"robisepCode\": \"picker2\",\r\n    \"newTaskState\": \"ACCEPTED\",\r\n    \"taskType\": \"SURVEILLANCE\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/tasks/tasks/{{taskCodeForPatch}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"tasks",
												"tasks",
												"{{taskCodeForPatch}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Accept Accepted Task Requisition",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Create the request body\r",
													"const requestBody = {\r",
													"    robisepType: 'robisepTypeTask1',\r",
													"    iamId: 'auth0|65885b770890c8703889edcb',\r",
													"    surveillanceTask: {\r",
													"        emergencyPhoneNumber: \"912345678\",\r",
													"        startingPointToWatch: \"roomTask2\",\r",
													"        endingPointToWatch: \"roomTask3\"\r",
													"    }\r",
													"};\r",
													"\r",
													"// Function to create the task\r",
													"function createTask(callback) {\r",
													"    pm.sendRequest({\r",
													"        url: 'http://localhost:4000/api/tasks/tasks',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'Authorization': 'Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImFKOGJkVF81N2JuR1pTZEI0djRPSCJ9.eyJpc3MiOiJodHRwczovL2Rldi01MWpsbWF4NW0xc2VicHBxLmV1LmF1dGgwLmNvbS8iLCJzdWIiOiJnb29nbGUtb2F1dGgyfDEwOTIxNDgzODIwMjMyMjM5NTc5NSIsImF1ZCI6WyJodHRwczovL2FwaS5hdXRoLnJvYmRyb25lZ28uY29tIiwiaHR0cHM6Ly9kZXYtNTFqbG1heDVtMXNlYnBwcS5ldS5hdXRoMC5jb20vdXNlcmluZm8iXSwiaWF0IjoxNzAzOTc1NjA5LCJleHAiOjE3MDY1Njc2MDksImF6cCI6InFzQUtyM0h2ZW55MVhNdXRzU3R6NXpyRWJRZ01YMHFxIiwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCIsInBlcm1pc3Npb25zIjpbImNyZWF0ZTp0YXNrcmVxdWlzaXRpb24iLCJtYW5hZ2U6YWRtaW4iLCJtYW5hZ2U6Y2FtcHVzIiwibWFuYWdlOmZsZWV0IiwibWFuYWdlOnRhc2tzIiwibWFuYWdlOnVzZXJzIiwidXNlcjpyZXF1ZXN0cyJdfQ.I7cXgypF9j_SQ6DcG6W6JKoi1ZoPcu5jAg5jhIeCOkTPLzggOfzt3i6BGzdlUGGcM3GY7J8eNG74B7Q6N-TsF7m4wugYVX2Iqpo2Cebnt6qkHU1lqeTiLeLFd5gmLBKgCYdhvDSErywFqloXNXHDMEm2Bn8_vFjeTeokOwTgtblYVd1As15e--b7TPmCrL107hEvRWIp2VpYYH2LgTb2chVxo20bJSZZwh_b3gQPe9Zsp2uj7ZPkN8opoA44r6Repap_NveJkXquV2ADwxjCaEifqTwDOE0_1kefgqGVOw_DJFVQCjVz0Mo3mLF6uyfyIgbsC0RQZ4v5Swg-xAjRBQ'\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'raw',\r",
													"            raw: JSON.stringify(requestBody),\r",
													"        },\r",
													"    }, (error, response) => {\r",
													"        // Log response\r",
													"        console.log('Crei');\r",
													"\r",
													"        // Check for errors\r",
													"        if (error) {\r",
													"            console.error(error);\r",
													"            return;\r",
													"        }\r",
													"\r",
													"        // Parse the response JSON\r",
													"        const responseBody = response.json();\r",
													"\r",
													"        // Extract the taskCode\r",
													"        const taskCode = responseBody.taskCode;\r",
													"\r",
													"        pm.collectionVariables.set('taskCodeForPatch', taskCode);\r",
													"\r",
													"        // Call the callback function to indicate completion\r",
													"        callback();\r",
													"    });\r",
													"}\r",
													"\r",
													"// Function to accept the task\r",
													"function acceptTask() {\r",
													"    // Prepare the request to accept the task\r",
													"    const acceptRequestBody = {\r",
													"        robisepCode: \"picker2\",\r",
													"        newTaskState: \"ACCEPTED\",\r",
													"        taskType: \"SURVEILLANCE\"\r",
													"    }\r",
													"\r",
													"    const requestUrl = 'http://localhost:4000/api/tasks/tasks/' + pm.collectionVariables.get('taskCodeForPatch');\r",
													"\r",
													"    pm.sendRequest({\r",
													"        url: requestUrl,\r",
													"        method: 'PATCH',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'Authorization': 'Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImFKOGJkVF81N2JuR1pTZEI0djRPSCJ9.eyJpc3MiOiJodHRwczovL2Rldi01MWpsbWF4NW0xc2VicHBxLmV1LmF1dGgwLmNvbS8iLCJzdWIiOiJnb29nbGUtb2F1dGgyfDEwOTIxNDgzODIwMjMyMjM5NTc5NSIsImF1ZCI6WyJodHRwczovL2FwaS5hdXRoLnJvYmRyb25lZ28uY29tIiwiaHR0cHM6Ly9kZXYtNTFqbG1heDVtMXNlYnBwcS5ldS5hdXRoMC5jb20vdXNlcmluZm8iXSwiaWF0IjoxNzAzOTc1NjA5LCJleHAiOjE3MDY1Njc2MDksImF6cCI6InFzQUtyM0h2ZW55MVhNdXRzU3R6NXpyRWJRZ01YMHFxIiwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCIsInBlcm1pc3Npb25zIjpbImNyZWF0ZTp0YXNrcmVxdWlzaXRpb24iLCJtYW5hZ2U6YWRtaW4iLCJtYW5hZ2U6Y2FtcHVzIiwibWFuYWdlOmZsZWV0IiwibWFuYWdlOnRhc2tzIiwibWFuYWdlOnVzZXJzIiwidXNlcjpyZXF1ZXN0cyJdfQ.I7cXgypF9j_SQ6DcG6W6JKoi1ZoPcu5jAg5jhIeCOkTPLzggOfzt3i6BGzdlUGGcM3GY7J8eNG74B7Q6N-TsF7m4wugYVX2Iqpo2Cebnt6qkHU1lqeTiLeLFd5gmLBKgCYdhvDSErywFqloXNXHDMEm2Bn8_vFjeTeokOwTgtblYVd1As15e--b7TPmCrL107hEvRWIp2VpYYH2LgTb2chVxo20bJSZZwh_b3gQPe9Zsp2uj7ZPkN8opoA44r6Repap_NveJkXquV2ADwxjCaEifqTwDOE0_1kefgqGVOw_DJFVQCjVz0Mo3mLF6uyfyIgbsC0RQZ4v5Swg-xAjRBQ'\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'raw',\r",
													"            raw: JSON.stringify(acceptRequestBody),\r",
													"        },\r",
													"    }, (error, response) => {\r",
													"        // Log response\r",
													"        console.log('aceitei');\r",
													"\r",
													"        // Check for errors\r",
													"        if (error) {\r",
													"            console.error(error);\r",
													"            return;\r",
													"        }\r",
													"    });\r",
													"}\r",
													"\r",
													"// Call createTask with acceptTask as a callback\r",
													"createTask(acceptTask);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"robisepCode\": \"picker2\",\r\n    \"newTaskState\": \"ACCEPTED\",\r\n    \"taskType\": \"SURVEILLANCE\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/tasks/tasks/{{taskCodeForPatch}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"tasks",
												"tasks",
												"{{taskCodeForPatch}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Refuse Refused Task Requisition",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Create the request body\r",
													"const requestBody = {\r",
													"    robisepType: 'robisepTypeTask1',\r",
													"    iamId: 'auth0|65885b770890c8703889edcb',\r",
													"    surveillanceTask: {\r",
													"        emergencyPhoneNumber: \"912345678\",\r",
													"        startingPointToWatch: \"roomTask2\",\r",
													"        endingPointToWatch: \"roomTask3\"\r",
													"    }\r",
													"};\r",
													"\r",
													"// Function to create the task\r",
													"function createTask(callback) {\r",
													"    pm.sendRequest({\r",
													"        url: 'http://localhost:4000/api/tasks/tasks',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'Authorization': 'Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImFKOGJkVF81N2JuR1pTZEI0djRPSCJ9.eyJpc3MiOiJodHRwczovL2Rldi01MWpsbWF4NW0xc2VicHBxLmV1LmF1dGgwLmNvbS8iLCJzdWIiOiJnb29nbGUtb2F1dGgyfDEwOTIxNDgzODIwMjMyMjM5NTc5NSIsImF1ZCI6WyJodHRwczovL2FwaS5hdXRoLnJvYmRyb25lZ28uY29tIiwiaHR0cHM6Ly9kZXYtNTFqbG1heDVtMXNlYnBwcS5ldS5hdXRoMC5jb20vdXNlcmluZm8iXSwiaWF0IjoxNzAzOTc1NjA5LCJleHAiOjE3MDY1Njc2MDksImF6cCI6InFzQUtyM0h2ZW55MVhNdXRzU3R6NXpyRWJRZ01YMHFxIiwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCIsInBlcm1pc3Npb25zIjpbImNyZWF0ZTp0YXNrcmVxdWlzaXRpb24iLCJtYW5hZ2U6YWRtaW4iLCJtYW5hZ2U6Y2FtcHVzIiwibWFuYWdlOmZsZWV0IiwibWFuYWdlOnRhc2tzIiwibWFuYWdlOnVzZXJzIiwidXNlcjpyZXF1ZXN0cyJdfQ.I7cXgypF9j_SQ6DcG6W6JKoi1ZoPcu5jAg5jhIeCOkTPLzggOfzt3i6BGzdlUGGcM3GY7J8eNG74B7Q6N-TsF7m4wugYVX2Iqpo2Cebnt6qkHU1lqeTiLeLFd5gmLBKgCYdhvDSErywFqloXNXHDMEm2Bn8_vFjeTeokOwTgtblYVd1As15e--b7TPmCrL107hEvRWIp2VpYYH2LgTb2chVxo20bJSZZwh_b3gQPe9Zsp2uj7ZPkN8opoA44r6Repap_NveJkXquV2ADwxjCaEifqTwDOE0_1kefgqGVOw_DJFVQCjVz0Mo3mLF6uyfyIgbsC0RQZ4v5Swg-xAjRBQ'\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'raw',\r",
													"            raw: JSON.stringify(requestBody),\r",
													"        },\r",
													"    }, (error, response) => {\r",
													"        // Log response\r",
													"        console.log('Crei');\r",
													"\r",
													"        // Check for errors\r",
													"        if (error) {\r",
													"            console.error(error);\r",
													"            return;\r",
													"        }\r",
													"\r",
													"        // Parse the response JSON\r",
													"        const responseBody = response.json();\r",
													"\r",
													"        // Extract the taskCode\r",
													"        const taskCode = responseBody.taskCode;\r",
													"\r",
													"        pm.collectionVariables.set('taskCodeForPatch', taskCode);\r",
													"\r",
													"        // Call the callback function to indicate completion\r",
													"        callback();\r",
													"    });\r",
													"}\r",
													"\r",
													"// Function to accept the task\r",
													"function acceptTask() {\r",
													"    // Prepare the request to accept the task\r",
													"    const acceptRequestBody = {\r",
													"        robisepCode: \"picker2\",\r",
													"        newTaskState: \"REFUSED\",\r",
													"        taskType: \"SURVEILLANCE\"\r",
													"    }\r",
													"\r",
													"    const requestUrl = 'http://localhost:4000/api/tasks/tasks/' + pm.collectionVariables.get('taskCodeForPatch');\r",
													"\r",
													"    pm.sendRequest({\r",
													"        url: requestUrl,\r",
													"        method: 'PATCH',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'Authorization': 'Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImFKOGJkVF81N2JuR1pTZEI0djRPSCJ9.eyJpc3MiOiJodHRwczovL2Rldi01MWpsbWF4NW0xc2VicHBxLmV1LmF1dGgwLmNvbS8iLCJzdWIiOiJnb29nbGUtb2F1dGgyfDEwOTIxNDgzODIwMjMyMjM5NTc5NSIsImF1ZCI6WyJodHRwczovL2FwaS5hdXRoLnJvYmRyb25lZ28uY29tIiwiaHR0cHM6Ly9kZXYtNTFqbG1heDVtMXNlYnBwcS5ldS5hdXRoMC5jb20vdXNlcmluZm8iXSwiaWF0IjoxNzAzOTc1NjA5LCJleHAiOjE3MDY1Njc2MDksImF6cCI6InFzQUtyM0h2ZW55MVhNdXRzU3R6NXpyRWJRZ01YMHFxIiwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCIsInBlcm1pc3Npb25zIjpbImNyZWF0ZTp0YXNrcmVxdWlzaXRpb24iLCJtYW5hZ2U6YWRtaW4iLCJtYW5hZ2U6Y2FtcHVzIiwibWFuYWdlOmZsZWV0IiwibWFuYWdlOnRhc2tzIiwibWFuYWdlOnVzZXJzIiwidXNlcjpyZXF1ZXN0cyJdfQ.I7cXgypF9j_SQ6DcG6W6JKoi1ZoPcu5jAg5jhIeCOkTPLzggOfzt3i6BGzdlUGGcM3GY7J8eNG74B7Q6N-TsF7m4wugYVX2Iqpo2Cebnt6qkHU1lqeTiLeLFd5gmLBKgCYdhvDSErywFqloXNXHDMEm2Bn8_vFjeTeokOwTgtblYVd1As15e--b7TPmCrL107hEvRWIp2VpYYH2LgTb2chVxo20bJSZZwh_b3gQPe9Zsp2uj7ZPkN8opoA44r6Repap_NveJkXquV2ADwxjCaEifqTwDOE0_1kefgqGVOw_DJFVQCjVz0Mo3mLF6uyfyIgbsC0RQZ4v5Swg-xAjRBQ'\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'raw',\r",
													"            raw: JSON.stringify(acceptRequestBody),\r",
													"        },\r",
													"    }, (error, response) => {\r",
													"        // Log response\r",
													"        console.log('aceitei');\r",
													"\r",
													"        // Check for errors\r",
													"        if (error) {\r",
													"            console.error(error);\r",
													"            return;\r",
													"        }\r",
													"    });\r",
													"}\r",
													"\r",
													"// Call createTask with acceptTask as a callback\r",
													"createTask(acceptTask);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"robisepCode\": \"picker2\",\r\n    \"newTaskState\": \"REFUSED\",\r\n    \"taskType\": \"SURVEILLANCE\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}:{{PORT}}/{{PREFIX}}/tasks/tasks/{{taskCodeForPatch}}",
											"host": [
												"{{URL}}"
											],
											"port": "{{PORT}}",
											"path": [
												"{{PREFIX}}",
												"tasks",
												"tasks",
												"{{taskCodeForPatch}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImFKOGJkVF81N2JuR1pTZEI0djRPSCJ9.eyJpc3MiOiJodHRwczovL2Rldi01MWpsbWF4NW0xc2VicHBxLmV1LmF1dGgwLmNvbS8iLCJzdWIiOiJnb29nbGUtb2F1dGgyfDEwMDczOTgyMTg1MzA3OTAwMjI3NSIsImF1ZCI6WyJodHRwczovL2FwaS5hdXRoLnJvYmRyb25lZ28uY29tIiwiaHR0cHM6Ly9kZXYtNTFqbG1heDVtMXNlYnBwcS5ldS5hdXRoMC5jb20vdXNlcmluZm8iXSwiaWF0IjoxNzA0MTU3Mzk5LCJleHAiOjE3MDY3NDkzOTksImF6cCI6InFzQUtyM0h2ZW55MVhNdXRzU3R6NXpyRWJRZ01YMHFxIiwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCIsInBlcm1pc3Npb25zIjpbImNyZWF0ZTp0YXNrcmVxdWlzaXRpb24iLCJtYW5hZ2U6YWRtaW4iLCJtYW5hZ2U6Y2FtcHVzIiwibWFuYWdlOmZsZWV0IiwibWFuYWdlOnRhc2tzIiwibWFuYWdlOnVzZXJzIiwidXNlcjpyZXF1ZXN0cyJdfQ.yPqLOhx_Uo46fKaIntAjWFWypGpMgELk1T9xUMWF8yN4C-QBOQ7Woaa8UQtGTKybNGYw6st19nEFuKT_wVBix1ysBDmL9taPIEkJZMUcK4cALl4DYDhnUuH5krJxUdNO6t2TEZSrN8Wa9YVxgZoiFHR_1NRSzweWNaImED2-XFLyV_bOvjeBJqOA31SzdS-zmDKG4Z36PcMx_jxU5RFGBOq2gmWo7G8NFqRiIJ-UUiv8oQGv0EPnRjTE1Rw5RUMkpT0PWyLdvfaGUD0qQ0mQNA9LVeEaXFW_pRQOWXdJSlnUwgO_q16AK91jHk2iGIs3bdkjySVIzP4cPIxfo0TRmA",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "URL",
			"value": "localhost",
			"type": "string"
		},
		{
			"key": "PORT",
			"value": "4000",
			"type": "string"
		},
		{
			"key": "PREFIX",
			"value": "api",
			"type": "string"
		},
		{
			"key": "CAMPUS_API",
			"value": "campus",
			"type": "string"
		},
		{
			"key": "FLEET_API",
			"value": "fleet",
			"type": "string"
		},
		{
			"key": "buildingEditId",
			"value": "testeid",
			"type": "string"
		},
		{
			"key": "edit",
			"value": "editfloor",
			"type": "string"
		},
		{
			"key": "list",
			"value": "buildingFloorPostman1",
			"type": "string"
		},
		{
			"key": "nofloors",
			"value": "buildingFloorPostman2",
			"type": "string"
		},
		{
			"key": "listwithelevator",
			"value": "buildingToListFloorsWithElevator1",
			"type": "string"
		},
		{
			"key": "listwithelevatornofloors",
			"value": "buildingToListFloorsWithElevator2",
			"type": "string"
		},
		{
			"key": "listwithpassage",
			"value": "buildingToListFloorsWithPassage1",
			"type": "string"
		},
		{
			"key": "listwithpassagenofloors",
			"value": "buildingToListFloorsWithPassage2",
			"type": "string"
		},
		{
			"key": "hostport",
			"value": "{{URL}}:{{PORT}}",
			"type": "string"
		},
		{
			"key": "taskCodeForPatch",
			"value": ""
		}
	]
}